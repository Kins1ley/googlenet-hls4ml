#ifndef GOOGLENET_H_
#define GOOGLENET_H_


#include "template_config.h"
#include "header.h"
#include "allocate_config.h"
void googlenet(
	FIX_INT20 data_0[IMAGE_CH*IMAGE_H*IMAGE_W],
	FIX_INT20 DDR_feature_0[DDR_FEATURE_LENGTH],
	FIX_INT20 DDR_feature_1[DDR_FEATURE_LENGTH],
	FIX_INT20 DDR_feature_2[DDR_FEATURE_LENGTH],
	//required weight, bias
	//save features that are too large to save in BRAM
	/////////////////////////////// convolution -> inception(3b) max pool////////////////////////////(Junpeng)
	FIX_INT8 DDR_weight_7x7[DDR_WEIGHT_7x7_CHANNEL][7][7],
	FIX_INT8 DDR_weight_5x5[DDR_WEIGHT_5x5_CHANNEL][5][5],
	FIX_INT8 DDR_weight_3x3[DDR_WEIGHT_3x3_CHANNEL][3][3],
	FIX_INT8 DDR_weight_1x1[DDR_WEIGHT_1x1_CHANNEL][1][1],
	FIX_INT20 DDR_bias[DDR_BIAS_NUM],
	/////DRAM_insert/////
	/////////////////////////////// inception(4a) -> inception(4e) max pool////////////////////////////(Binwu)


	/////////////////////////////// inception(5a) -> linear              ////////////////////////////(Qi)



) {
#pragma HLS INTERFACE m_axi depth=IMAGE_CH*IMAGE_H*IMAGE_W																port=data_0					offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_FEATURE_LENGTH																	port=DDR_feature_0			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_FEATURE_LENGTH																	port=DDR_feature_1			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_FEATURE_LENGTH																	port=DDR_feature_2			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_WEIGHT_7x7_OUT_CHANNEL*DDR_WEIGHT_7x7_IN_CHANNEL*7*7								port=DDR_weight7x7			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_WEIGHT_5x5_OUT_CHANNEL*DDR_WEIGHT_5x5_IN_CHANNEL*5*5								port=DDR_weight5x5			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_WEIGHT_3x3_OUT_CHANNEL*DDR_WEIGHT_3x3_IN_CHANNEL*3*3								port=DDR_weight3x3			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_WEIGHT_1x1_OUT_CHANNEL*DDR_WEIGHT_1x1_IN_CHANNEL*1*1								port=DDR_weight1x1			offset=slave bundle=INPUT
#pragma HLS INTERFACE m_axi depth=DDR_BIAS_NUM																			port=DDR_bias				offset=slave bundle=INPUT
/////interface_insert/////

	//global BRAM
	static FIX_INT8 global_weight_7x7[NUM_WEIGHT_GLOBAL_7x7][OUT_CHANNEL_WEIGHT_GLOBAL_7x7][IN_CHANNEL_WEIGHT_GLOBAL_7x7][7][7];
	static FIX_INT8 global_weight_5x5[NUM_WEIGHT_GLOBAL_5x5][OUT_CHANNEL_WEIGHT_GLOBAL_5x5][IN_CHANNEL_WEIGHT_GLOBAL_5x5][5][5];
	static FIX_INT8 global_weight_3x3[NUM_WEIGHT_GLOBAL_3x3][OUT_CHANNEL_WEIGHT_GLOBAL_3x3][IN_CHANNEL_WEIGHT_GLOBAL_3x3][3][3];
	static FIX_INT8 global_weight_1x1[NUM_WEIGHT_GLOBAL_1x1][OUT_CHANNEL_WEIGHT_GLOBAL_1x1][IN_CHANNEL_WEIGHT_GLOBAL_1x1][1][1];
	static FIX_INT20 global_feature[NUM_FEATURE_GLOBAL][CHANNEL_FEATURE_GLOBAL][WIDTH_FEATURE_GLOBAL][HEIGHT_FEATURE_GLOBAL];

	//local BRAM of conv layers
	static FIX_INT20 local_feature_in_CONV1x1_S1[NUM_PE_CONV1x1_S1][IN_CHAN_CONV1x1_S1][IN_HEIGHT_CONV1x1_S1][IN_WIDTH_CONV1x1_S1];
	static FIX_INT8 local_weight_CONV1x1_S1[NUM_PE_CONV1x1_S1][OUT_CHAN_CONV1x1_S1][IN_CHAN_CONV1x1_S1][1][1];
	static FIX_INT20 local_feature_out_CONV1x1_S1[NUM_PE_CONV1x1_S1][OUT_CHAN_CONV1x1_S1][OUT_HEIGHT_CONV1x1_S1][OUT_WIDTH_CONV1x1_S1];

	static FIX_INT20 local_feature_in_CONV3x3_S1[NUM_PE_CONV3x3_S1][IN_CHAN_CONV3x3_S1][IN_HEIGHT_CONV3x3_S1][IN_WIDTH_CONV3x3_S1];
	static FIX_INT8 local_weight_CONV3x3_S1[NUM_PE_CONV3x3_S1][OUT_CHAN_CONV3x3_S1][IN_CHAN_CONV3x3_S1][3][3];
	static FIX_INT20 local_feature_out_CONV3x3_S1[NUM_PE_CONV3x3_S1][OUT_CHAN_CONV3x3_S1][OUT_HEIGHT_CONV3x3_S1][OUT_WIDTH_CONV3x3_S1];

	static FIX_INT20 local_feature_in_CONV5x5_S1[NUM_PE_CONV5x5_S1][IN_CHAN_CONV5x5_S1][IN_HEIGHT_CONV5x5_S1][IN_WIDTH_CONV5x5_S1];
	static FIX_INT8 local_weight_CONV5x5_S1[NUM_PE_CONV5x5_S1][OUT_CHAN_CONV5x5_S1][IN_CHAN_CONV5x5_S1][5][5];
	static FIX_INT20 local_feature_out_CONV5x5_S1[NUM_PE_CONV5x5_S1][OUT_CHAN_CONV5x5_S1][OUT_HEIGHT_CONV5x5_S1][OUT_WIDTH_CONV5x5_S1];

	static FIX_INT20 local_feature_in_CONV7x7_S2[NUM_PE_CONV7x7_S2][IN_CHAN_CONV7x7_S2][IN_HEIGHT_CONV7x7_S2][IN_WIDTH_CONV7x7_S2];
	static FIX_INT8 local_weight_CONV7x7_S2[NUM_PE_CONV7x7_S2][OUT_CHAN_CONV7x7_S2][IN_CHAN_CONV7x7_S2][7][7];
	static FIX_INT20 local_feature_out_CONV7x7_S2[NUM_PE_CONV7x7_S2][OUT_CHAN_CONV7x7_S2][OUT_HEIGHT_CONV7x7_S2][OUT_WIDTH_CONV7x7_S2];


	//local BRAM of pooling layers
	static FIX_INT20 local_feature_in_MAXPOOL3x3_S1[NUM_PE_MAXPOOL3x3_S1][N_CHAN_MAXPOOL3x3_S1][IN_HEIGHT_MAXPOOL3x3_S1][IN_WIDTH_MAXPOOL3x3_S1];
	static FIX_INT20 local_feature_out_MAXPOOL3x3_S1[NUM_PE_MAXPOOL3x3_S1][N_CHAN_MAXPOOL3x3_S1][OUT_HEIGHT_MAXPOOL3x3_S1][OUT_WIDTH_MAXPOOL3x3_S1];

	static FIX_INT20 local_feature_in_MAXPOOL3x3_S2[NUM_PE_MAXPOOL3x3_S2][N_CHAN_MAXPOOL3x3_S2][IN_HEIGHT_MAXPOOL3x3_S2][IN_WIDTH_MAXPOOL3x3_S2];
	static FIX_INT20 local_feature_out_MAXPOOL3x3_S2[NUM_PE_MAXPOOL3x3_S2][N_CHAN_MAXPOOL3x3_S2][OUT_HEIGHT_MAXPOOL3x3_S2][OUT_WIDTH_MAXPOOL3x3_S2];

	static FIX_INT20 local_feature_in_AVGPOOL7x7_S1[NUM_PE_AVGPOOL7x7_S1][N_CHAN_AVGPOOL7x7_S1][IN_HEIGHT_AVGPOOL7x7_S1][IN_WIDTH_AVGPOOL7x7_S1];
	static FIX_INT20 local_feature_out_AVGPOOL7x7_S1[NUM_PE_AVGPOOL7x7_S1][N_CHAN_AVGPOOL7x7_S1][OUT_HEIGHT_AVGPOOL7x7_S1][OUT_WIDTH_AVGPOOL7x7_S1];

	//local BRAM of LRN
	static FIX_INT20 local_feature_in_LRN[NUM_PE_LRN][N_CHAN_LRN][IN_HEIGHT_LRN][IN_WIDTH_LRN];
	static FIX_INT20 local_feature_out_LRN[NUM_PE_LRN][N_CHAN_LRN][OUT_HEIGHT_LRN][OUT_WIDTH_LRN];

	//other param of LRN
	static FIX_INT20 bias = 1;
	static FIX_INT20 alpha = 1;
	static FIX_INT20 beta = 1;

	/////top_function_insert/////
//conv1_7x7_s2
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < conv1_7x7_s2_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < conv1_7x7_s2_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < conv1_7x7_s2_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < conv1_7x7_s2_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * conv1_7x7_s2_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * conv1_7x7_s2_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * conv1_7x7_s2_block_in_channel;
				int global_block_in_feature_c_num = conv1_7x7_s2_block_in_channel;
				int global_block_in_feature_h_num = conv1_7x7_s2_block_in_height;
				int global_block_in_feature_w_num = conv1_7x7_s2_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * conv1_7x7_s2_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * conv1_7x7_s2_block_out_channel;
				int global_weight_ic_num = conv1_7x7_s2_block_in_channel;
				int global_weight_oc_num = conv1_7x7_s2_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == conv1_7x7_s2_outer_height - 1) {
						global_block_in_feature_h_num = conv1_7x7_s2_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == conv1_7x7_s2_outer_width - 1) {
						global_block_in_feature_w_num = conv1_7x7_s2_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == conv1_7x7_s2_outer_out_channel - 1) {
						global_weight_oc_num = conv1_7x7_s2_out_channel - outer_oc_idx * conv1_7x7_s2_block_out_channel;
					}
					if (outer_ic_idx == conv1_7x7_s2_outer_in_channel - 1) {
						global_block_in_feature_c_num = conv1_7x7_s2_in_channel - outer_ic_idx * conv1_7x7_s2_block_in_channel;
						global_weight_ic_num = conv1_7x7_s2_in_channel - outer_ic_idx * conv1_7x7_s2_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[conv1_7x7_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_data_0_config, global_feature_config>(DDR_feature_0, global_feature[conv1_7x7_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[conv1_7x7_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_data_0_config, global_feature_config>(DDR_feature_0, global_feature[conv1_7x7_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_7x7); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_7x7) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_7x7_config, WEIGHT_GLOBAL_7x7_config>(DDR_weight_7x7, global_weight_7x7[conv1_7x7_s2_allocate_global_weight_7x7_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_7x7, OUT_CHANNEL_WEIGHT_GLOBAL_7x7,
							conv1_7x7_s2_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_7x7_config, WEIGHT_GLOBAL_7x7_config>(DDR_weight_7x7, global_weight_7x7[conv1_7x7_s2_allocate_global_weight_7x7_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_7x7, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_7x7,
							conv1_7x7_s2_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? conv1_7x7_s2_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (conv1_7x7_s2_outer_height - 1) ? conv1_7x7_s2_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? conv1_7x7_s2_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (conv1_7x7_s2_outer_width - 1) ? conv1_7x7_s2_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + conv1_7x7_s2_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV7x7_S2) / (STRIDE_CONV7x7_S2)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + conv1_7x7_s2_pad_top, STRIDE_CONV7x7_S2),
					OUT_HEIGHT_CONV7x7_S2);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + conv1_7x7_s2_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV7x7_S2) / (STRIDE_CONV7x7_S2)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + conv1_7x7_s2_pad_left, STRIDE_CONV7x7_S2),
					OUT_WIDTH_CONV7x7_S2);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + conv1_7x7_s2_pad_top - KERNEL_HEIGHT_CONV7x7_S2) / (STRIDE_CONV7x7_S2)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV7x7_S2),
						OUT_HEIGHT_CONV7x7_S2);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + conv1_7x7_s2_pad_left - KERNEL_WIDTH_CONV7x7_S2) / (STRIDE_CONV7x7_S2)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV7x7_S2),
						OUT_WIDTH_CONV7x7_S2);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, conv1_7x7_s2_inner_pe_parallel * OUT_CHAN_CONV7x7_S2);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV7x7_S2);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = conv1_7x7_s2_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * conv1_7x7_s2_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV7x7_S2;
									int global_weight_oc_start_idx = (o_idx * conv1_7x7_s2_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV7x7_S2;
									int local_weight_ic_num = IN_CHAN_CONV7x7_S2;
									int local_weight_oc_num = OUT_CHAN_CONV7x7_S2;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV7x7_S2;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV7x7_S2 * STRIDE_CONV7x7_S2 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV7x7_S2 * STRIDE_CONV7x7_S2 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV7x7_S2;
									int local_in_feature_h_num = IN_HEIGHT_CONV7x7_S2;
									int local_in_feature_w_num = IN_WIDTH_CONV7x7_S2;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV7x7_S2;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV7x7_S2;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV7x7_S2;
									int local_out_feature_w_num = OUT_WIDTH_CONV7x7_S2;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV7x7_S2 * STRIDE_CONV7x7_S2;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV7x7_S2 * STRIDE_CONV7x7_S2;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV7x7_S2 * conv1_7x7_s2_inner_pe_parallel - OUT_CHAN_CONV7x7_S2 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV7x7_S2;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV7x7_S2;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + conv1_7x7_s2_pad_top) % STRIDE_CONV7x7_S2;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + conv1_7x7_s2_pad_left) % STRIDE_CONV7x7_S2;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV7x7_S2_local_feature_out_config>(local_feature_out_CONV7x7_S2[pe_idx]);
											nnet::set_bias<CONV7x7_S2_set_bias_config>(local_feature_out_CONV7x7_S2[pe_idx], DDR_bias + conv1_7x7_s2_bias_DDR_offset + (conv1_7x7_s2_allocate_bias_start_idx + pe_idx + o_idx * conv1_7x7_s2_inner_pe_parallel + outer_oc_idx * conv1_7x7_s2_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV7x7_S2_local_feature_out_config>(local_feature_out_CONV7x7_S2[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV7x7_S2_local_feature_out_config>(global_feature[conv1_7x7_s2_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV7x7_S2[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV7x7_S2_local_feature_in_config>(local_feature_in_CONV7x7_S2[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV7x7_S2_local_feature_in_config>(global_feature[conv1_7x7_s2_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV7x7_S2[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_7x7_config, CONV7x7_S2_local_weight_config>(global_weight_7x7[conv1_7x7_s2_allocate_global_weight_7x7_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_7x7], local_weight_CONV7x7_S2[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_7x7, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse7x7<conv2d_config_CONV7x7_S2>(local_feature_in_CONV7x7_S2[pe_idx], local_weight_CONV7x7_S2[pe_idx][0], local_feature_out_CONV7x7_S2[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == conv1_7x7_s2_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV7x7_S2>(local_feature_out_CONV7x7_S2[pe_idx]);
										}
										nnet::copy_features_l2g<CONV7x7_S2_local_feature_out_config, global_feature_config>(local_feature_out_CONV7x7_S2[pe_idx], global_feature[conv1_7x7_s2_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == conv1_7x7_s2_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + conv1_7x7_s2_pad_top), STRIDE_CONV7x7_S2);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + conv1_7x7_s2_pad_left), STRIDE_CONV7x7_S2);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + conv1_7x7_s2_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV7x7_S2) / STRIDE_CONV7x7_S2 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + conv1_7x7_s2_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV7x7_S2) / STRIDE_CONV7x7_S2 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == conv1_7x7_s2_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + conv1_7x7_s2_pad_top + conv1_7x7_s2_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV7x7_S2) / STRIDE_CONV7x7_S2 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == conv1_7x7_s2_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + conv1_7x7_s2_pad_left + conv1_7x7_s2_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV7x7_S2) / STRIDE_CONV7x7_S2 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_conv1_7x7_s2_2_config>(global_feature[conv1_7x7_s2_allocate_global_out_feature_start_idx], DDR_feature_1,
								conv1_7x7_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_conv1_7x7_s2_2_config>(global_feature[conv1_7x7_s2_allocate_global_out_feature_start_idx], DDR_feature_1,
								conv1_7x7_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//pool1_3x3_s2
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < pool1_3x3_s2_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < pool1_3x3_s2_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < pool1_3x3_s2_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * pool1_3x3_s2_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * pool1_3x3_s2_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * pool1_3x3_s2_block_in_channel;
            int global_block_in_feature_c_num = pool1_3x3_s2_block_in_channel;
            int global_block_in_feature_h_num = pool1_3x3_s2_block_in_height;
            int global_block_in_feature_w_num = pool1_3x3_s2_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == pool1_3x3_s2_outer_height - 1) {
                    global_block_in_feature_h_num = pool1_3x3_s2_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == pool1_3x3_s2_outer_width - 1) {
                    global_block_in_feature_w_num = pool1_3x3_s2_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == pool1_3x3_s2_outer_in_channel - 1) {
                    global_block_in_feature_c_num = pool1_3x3_s2_in_channel - outer_ic_idx * pool1_3x3_s2_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool1_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_conv1_7x7_s2_2_config, global_feature_config>(DDR_feature_0, global_feature[pool1_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool1_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_conv1_7x7_s2_2_config, global_feature_config>(DDR_feature_0, global_feature[pool1_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? pool1_3x3_s2_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (pool1_3x3_s2_outer_height - 1) ? pool1_3x3_s2_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? pool1_3x3_s2_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (pool1_3x3_s2_outer_width - 1) ? pool1_3x3_s2_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool1_3x3_s2_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + pool1_3x3_s2_pad_top, STRIDE_MAXPOOL3x3_S2),
                OUT_HEIGHT_MAXPOOL3x3_S2);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool1_3x3_s2_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + pool1_3x3_s2_pad_left, STRIDE_MAXPOOL3x3_S2),
                OUT_WIDTH_MAXPOOL3x3_S2);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + pool1_3x3_s2_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_HEIGHT_MAXPOOL3x3_S2);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + pool1_3x3_s2_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_WIDTH_MAXPOOL3x3_S2);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, pool1_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = pool1_3x3_s2_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * pool1_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2, N_CHAN_MAXPOOL3x3_S2);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * pool1_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S2;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S2;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * pool1_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S2;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S2;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * pool1_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * pool1_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + pool1_3x3_s2_pad_top) % STRIDE_MAXPOOL3x3_S2;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + pool1_3x3_s2_pad_left) % STRIDE_MAXPOOL3x3_S2;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S2_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S2[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S2_local_feature_in_config>(global_feature[pool1_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S2[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S2[pe_idx], local_feature_out_MAXPOOL3x3_S2[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S2_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S2[pe_idx], global_feature[pool1_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool1_3x3_s2_pad_top), STRIDE_MAXPOOL3x3_S2);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool1_3x3_s2_pad_left), STRIDE_MAXPOOL3x3_S2);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool1_3x3_s2_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool1_3x3_s2_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == pool1_3x3_s2_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool1_3x3_s2_pad_top + pool1_3x3_s2_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == pool1_3x3_s2_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool1_3x3_s2_pad_left + pool1_3x3_s2_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool1_3x3_s2_1_config>(global_feature[pool1_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool1_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool1_3x3_s2_1_config>(global_feature[pool1_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool1_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//conv2_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < conv2_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < conv2_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < conv2_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < conv2_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * conv2_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * conv2_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * conv2_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = conv2_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = conv2_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = conv2_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * conv2_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * conv2_3x3_reduce_block_out_channel;
				int global_weight_ic_num = conv2_3x3_reduce_block_in_channel;
				int global_weight_oc_num = conv2_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == conv2_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = conv2_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == conv2_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = conv2_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == conv2_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = conv2_3x3_reduce_out_channel - outer_oc_idx * conv2_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == conv2_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = conv2_3x3_reduce_in_channel - outer_ic_idx * conv2_3x3_reduce_block_in_channel;
						global_weight_ic_num = conv2_3x3_reduce_in_channel - outer_ic_idx * conv2_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[conv2_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool1_norm1_1_config, global_feature_config>(DDR_feature_0, global_feature[conv2_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[conv2_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool1_norm1_1_config, global_feature_config>(DDR_feature_0, global_feature[conv2_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[conv2_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							conv2_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[conv2_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							conv2_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? conv2_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (conv2_3x3_reduce_outer_height - 1) ? conv2_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? conv2_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (conv2_3x3_reduce_outer_width - 1) ? conv2_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + conv2_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + conv2_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + conv2_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + conv2_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + conv2_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + conv2_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, conv2_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = conv2_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * conv2_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * conv2_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * conv2_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + conv2_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + conv2_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + conv2_3x3_reduce_bias_DDR_offset + (conv2_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * conv2_3x3_reduce_inner_pe_parallel + outer_oc_idx * conv2_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[conv2_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[conv2_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[conv2_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == conv2_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[conv2_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == conv2_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + conv2_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + conv2_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + conv2_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + conv2_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == conv2_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + conv2_3x3_reduce_pad_top + conv2_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == conv2_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + conv2_3x3_reduce_pad_left + conv2_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_conv2_3x3_reduce_2_config>(global_feature[conv2_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								conv2_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_conv2_3x3_reduce_2_config>(global_feature[conv2_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								conv2_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//conv2_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < conv2_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < conv2_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < conv2_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < conv2_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * conv2_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * conv2_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * conv2_3x3_block_in_channel;
				int global_block_in_feature_c_num = conv2_3x3_block_in_channel;
				int global_block_in_feature_h_num = conv2_3x3_block_in_height;
				int global_block_in_feature_w_num = conv2_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * conv2_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * conv2_3x3_block_out_channel;
				int global_weight_ic_num = conv2_3x3_block_in_channel;
				int global_weight_oc_num = conv2_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == conv2_3x3_outer_height - 1) {
						global_block_in_feature_h_num = conv2_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == conv2_3x3_outer_width - 1) {
						global_block_in_feature_w_num = conv2_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == conv2_3x3_outer_out_channel - 1) {
						global_weight_oc_num = conv2_3x3_out_channel - outer_oc_idx * conv2_3x3_block_out_channel;
					}
					if (outer_ic_idx == conv2_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = conv2_3x3_in_channel - outer_ic_idx * conv2_3x3_block_in_channel;
						global_weight_ic_num = conv2_3x3_in_channel - outer_ic_idx * conv2_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[conv2_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_conv2_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[conv2_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[conv2_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_conv2_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[conv2_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[conv2_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							conv2_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[conv2_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							conv2_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? conv2_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (conv2_3x3_outer_height - 1) ? conv2_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? conv2_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (conv2_3x3_outer_width - 1) ? conv2_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + conv2_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + conv2_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + conv2_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + conv2_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + conv2_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + conv2_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, conv2_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = conv2_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * conv2_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * conv2_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * conv2_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + conv2_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + conv2_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + conv2_3x3_bias_DDR_offset + (conv2_3x3_allocate_bias_start_idx + pe_idx + o_idx * conv2_3x3_inner_pe_parallel + outer_oc_idx * conv2_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[conv2_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[conv2_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[conv2_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == conv2_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[conv2_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == conv2_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + conv2_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + conv2_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + conv2_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + conv2_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == conv2_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + conv2_3x3_pad_top + conv2_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == conv2_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + conv2_3x3_pad_left + conv2_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_conv2_3x3_2_config>(global_feature[conv2_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								conv2_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_conv2_3x3_2_config>(global_feature[conv2_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								conv2_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//pool2_3x3_s2
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < pool2_3x3_s2_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < pool2_3x3_s2_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < pool2_3x3_s2_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * pool2_3x3_s2_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * pool2_3x3_s2_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * pool2_3x3_s2_block_in_channel;
            int global_block_in_feature_c_num = pool2_3x3_s2_block_in_channel;
            int global_block_in_feature_h_num = pool2_3x3_s2_block_in_height;
            int global_block_in_feature_w_num = pool2_3x3_s2_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == pool2_3x3_s2_outer_height - 1) {
                    global_block_in_feature_h_num = pool2_3x3_s2_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == pool2_3x3_s2_outer_width - 1) {
                    global_block_in_feature_w_num = pool2_3x3_s2_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == pool2_3x3_s2_outer_in_channel - 1) {
                    global_block_in_feature_c_num = pool2_3x3_s2_in_channel - outer_ic_idx * pool2_3x3_s2_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool2_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_conv2_norm2_1_config, global_feature_config>(DDR_feature_0, global_feature[pool2_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool2_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_conv2_norm2_1_config, global_feature_config>(DDR_feature_0, global_feature[pool2_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? pool2_3x3_s2_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (pool2_3x3_s2_outer_height - 1) ? pool2_3x3_s2_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? pool2_3x3_s2_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (pool2_3x3_s2_outer_width - 1) ? pool2_3x3_s2_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool2_3x3_s2_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + pool2_3x3_s2_pad_top, STRIDE_MAXPOOL3x3_S2),
                OUT_HEIGHT_MAXPOOL3x3_S2);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool2_3x3_s2_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + pool2_3x3_s2_pad_left, STRIDE_MAXPOOL3x3_S2),
                OUT_WIDTH_MAXPOOL3x3_S2);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + pool2_3x3_s2_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_HEIGHT_MAXPOOL3x3_S2);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + pool2_3x3_s2_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_WIDTH_MAXPOOL3x3_S2);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, pool2_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = pool2_3x3_s2_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * pool2_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2, N_CHAN_MAXPOOL3x3_S2);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * pool2_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S2;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S2;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * pool2_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S2;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S2;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * pool2_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * pool2_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + pool2_3x3_s2_pad_top) % STRIDE_MAXPOOL3x3_S2;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + pool2_3x3_s2_pad_left) % STRIDE_MAXPOOL3x3_S2;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S2_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S2[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S2_local_feature_in_config>(global_feature[pool2_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S2[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S2[pe_idx], local_feature_out_MAXPOOL3x3_S2[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S2_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S2[pe_idx], global_feature[pool2_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool2_3x3_s2_pad_top), STRIDE_MAXPOOL3x3_S2);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool2_3x3_s2_pad_left), STRIDE_MAXPOOL3x3_S2);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool2_3x3_s2_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool2_3x3_s2_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == pool2_3x3_s2_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool2_3x3_s2_pad_top + pool2_3x3_s2_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == pool2_3x3_s2_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool2_3x3_s2_pad_left + pool2_3x3_s2_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool2_3x3_s2_1_config>(global_feature[pool2_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool2_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool2_3x3_s2_1_config>(global_feature[pool2_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool2_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_3a_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3a_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3a_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_3a_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_3a_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_3a_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3a_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3a_1x1_block_out_channel;
				int global_weight_ic_num = inception_3a_1x1_block_in_channel;
				int global_weight_oc_num = inception_3a_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3a_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_3a_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_3a_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3a_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_3a_1x1_out_channel - outer_oc_idx * inception_3a_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_3a_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3a_1x1_in_channel - outer_ic_idx * inception_3a_1x1_block_in_channel;
						global_weight_ic_num = inception_3a_1x1_in_channel - outer_ic_idx * inception_3a_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3a_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3a_1x1_outer_height - 1) ? inception_3a_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3a_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3a_1x1_outer_width - 1) ? inception_3a_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3a_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3a_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3a_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3a_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3a_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3a_1x1_bias_DDR_offset + (inception_3a_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_3a_1x1_inner_pe_parallel + outer_oc_idx * inception_3a_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3a_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3a_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3a_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3a_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3a_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3a_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3a_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_1x1_pad_top + inception_3a_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_1x1_pad_left + inception_3a_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3a_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3a_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3a_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_3a_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_3a_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_3a_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3a_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3a_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_3a_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_3a_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3a_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_3a_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_3a_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3a_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_3a_3x3_reduce_out_channel - outer_oc_idx * inception_3a_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_3a_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3a_3x3_reduce_in_channel - outer_ic_idx * inception_3a_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_3a_3x3_reduce_in_channel - outer_ic_idx * inception_3a_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3a_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3a_3x3_reduce_outer_height - 1) ? inception_3a_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3a_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3a_3x3_reduce_outer_width - 1) ? inception_3a_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3a_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3a_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3a_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3a_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3a_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3a_3x3_reduce_bias_DDR_offset + (inception_3a_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_3a_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_3a_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3a_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3a_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3a_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3a_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3a_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_3x3_reduce_pad_top + inception_3a_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_3x3_reduce_pad_left + inception_3a_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_3x3_reduce_2_config>(global_feature[inception_3a_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_3x3_reduce_2_config>(global_feature[inception_3a_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3a_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3a_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3a_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_3a_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_3a_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_3a_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3a_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3a_3x3_block_out_channel;
				int global_weight_ic_num = inception_3a_3x3_block_in_channel;
				int global_weight_oc_num = inception_3a_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3a_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_3a_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_3a_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3a_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_3a_3x3_out_channel - outer_oc_idx * inception_3a_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_3a_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3a_3x3_in_channel - outer_ic_idx * inception_3a_3x3_block_in_channel;
						global_weight_ic_num = inception_3a_3x3_in_channel - outer_ic_idx * inception_3a_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_3a_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_3a_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_3a_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_3a_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3a_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3a_3x3_outer_height - 1) ? inception_3a_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3a_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3a_3x3_outer_width - 1) ? inception_3a_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3a_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3a_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3a_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3a_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_3a_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_3a_3x3_bias_DDR_offset + (inception_3a_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_3a_3x3_inner_pe_parallel + outer_oc_idx * inception_3a_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_3a_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_3a_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_3a_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3a_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_3a_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3a_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3a_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_3x3_pad_top + inception_3a_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_3x3_pad_left + inception_3a_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3a_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3a_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3a_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_3a_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_3a_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_3a_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3a_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3a_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_3a_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_3a_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3a_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_3a_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_3a_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3a_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_3a_5x5_reduce_out_channel - outer_oc_idx * inception_3a_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_3a_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3a_5x5_reduce_in_channel - outer_ic_idx * inception_3a_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_3a_5x5_reduce_in_channel - outer_ic_idx * inception_3a_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3a_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3a_5x5_reduce_outer_height - 1) ? inception_3a_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3a_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3a_5x5_reduce_outer_width - 1) ? inception_3a_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3a_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3a_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3a_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3a_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3a_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3a_5x5_reduce_bias_DDR_offset + (inception_3a_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_3a_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_3a_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3a_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3a_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3a_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3a_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3a_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_5x5_reduce_pad_top + inception_3a_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_5x5_reduce_pad_left + inception_3a_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_5x5_reduce_2_config>(global_feature[inception_3a_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_5x5_reduce_2_config>(global_feature[inception_3a_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3a_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3a_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3a_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_3a_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_3a_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_3a_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3a_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3a_5x5_block_out_channel;
				int global_weight_ic_num = inception_3a_5x5_block_in_channel;
				int global_weight_oc_num = inception_3a_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3a_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_3a_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_3a_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3a_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_3a_5x5_out_channel - outer_oc_idx * inception_3a_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_3a_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3a_5x5_in_channel - outer_ic_idx * inception_3a_5x5_block_in_channel;
						global_weight_ic_num = inception_3a_5x5_in_channel - outer_ic_idx * inception_3a_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_3a_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_3a_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_3a_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_3a_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3a_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3a_5x5_outer_height - 1) ? inception_3a_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3a_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3a_5x5_outer_width - 1) ? inception_3a_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3a_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3a_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3a_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3a_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_3a_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_3a_5x5_bias_DDR_offset + (inception_3a_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_3a_5x5_inner_pe_parallel + outer_oc_idx * inception_3a_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_3a_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_3a_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_3a_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3a_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_3a_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3a_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3a_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_5x5_pad_top + inception_3a_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_5x5_pad_left + inception_3a_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3a_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_3a_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_3a_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_3a_pool_block_in_height;
            int global_block_in_feature_w_num = inception_3a_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_3a_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_3a_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_3a_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_3a_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_3a_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_3a_pool_in_channel - outer_ic_idx * inception_3a_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_pool2_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_3a_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_3a_pool_outer_height - 1) ? inception_3a_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_3a_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_3a_pool_outer_width - 1) ? inception_3a_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_3a_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_3a_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_3a_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_3a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_3a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_3a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_3a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_3a_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_3a_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_3a_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_pool_pad_top + inception_3a_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_3a_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_pool_pad_left + inception_3a_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_pool_1_config>(global_feature[inception_3a_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_3a_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_pool_1_config>(global_feature[inception_3a_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_3a_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_3a_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3a_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3a_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3a_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3a_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3a_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3a_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3a_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_3a_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_3a_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_3a_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3a_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3a_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_3a_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_3a_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3a_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_3a_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_3a_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3a_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_3a_pool_proj_out_channel - outer_oc_idx * inception_3a_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_3a_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3a_pool_proj_in_channel - outer_ic_idx * inception_3a_pool_proj_block_in_channel;
						global_weight_ic_num = inception_3a_pool_proj_in_channel - outer_ic_idx * inception_3a_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3a_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3a_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3a_pool_proj_outer_height - 1) ? inception_3a_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3a_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3a_pool_proj_outer_width - 1) ? inception_3a_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3a_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3a_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3a_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3a_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3a_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3a_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3a_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3a_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3a_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3a_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3a_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3a_pool_proj_bias_DDR_offset + (inception_3a_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_3a_pool_proj_inner_pe_parallel + outer_oc_idx * inception_3a_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3a_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3a_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3a_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3a_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3a_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3a_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3a_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3a_pool_proj_pad_top + inception_3a_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3a_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3a_pool_proj_pad_left + inception_3a_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3a_output_1_config>(global_feature[inception_3a_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3a_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3b_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3b_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3b_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_3b_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_3b_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_3b_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3b_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3b_1x1_block_out_channel;
				int global_weight_ic_num = inception_3b_1x1_block_in_channel;
				int global_weight_oc_num = inception_3b_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3b_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_3b_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_3b_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3b_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_3b_1x1_out_channel - outer_oc_idx * inception_3b_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_3b_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3b_1x1_in_channel - outer_ic_idx * inception_3b_1x1_block_in_channel;
						global_weight_ic_num = inception_3b_1x1_in_channel - outer_ic_idx * inception_3b_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3b_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3b_1x1_outer_height - 1) ? inception_3b_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3b_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3b_1x1_outer_width - 1) ? inception_3b_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3b_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3b_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3b_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3b_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3b_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3b_1x1_bias_DDR_offset + (inception_3b_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_3b_1x1_inner_pe_parallel + outer_oc_idx * inception_3b_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3b_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3b_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3b_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3b_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3b_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3b_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3b_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_1x1_pad_top + inception_3b_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_1x1_pad_left + inception_3b_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3b_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3b_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3b_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_3b_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_3b_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_3b_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3b_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3b_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_3b_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_3b_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3b_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_3b_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_3b_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3b_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_3b_3x3_reduce_out_channel - outer_oc_idx * inception_3b_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_3b_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3b_3x3_reduce_in_channel - outer_ic_idx * inception_3b_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_3b_3x3_reduce_in_channel - outer_ic_idx * inception_3b_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3b_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3b_3x3_reduce_outer_height - 1) ? inception_3b_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3b_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3b_3x3_reduce_outer_width - 1) ? inception_3b_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3b_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3b_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3b_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3b_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3b_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3b_3x3_reduce_bias_DDR_offset + (inception_3b_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_3b_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_3b_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3b_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3b_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3b_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3b_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3b_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_3x3_reduce_pad_top + inception_3b_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_3x3_reduce_pad_left + inception_3b_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_3x3_reduce_2_config>(global_feature[inception_3b_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_3x3_reduce_2_config>(global_feature[inception_3b_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3b_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3b_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3b_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_3b_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_3b_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_3b_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3b_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3b_3x3_block_out_channel;
				int global_weight_ic_num = inception_3b_3x3_block_in_channel;
				int global_weight_oc_num = inception_3b_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3b_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_3b_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_3b_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3b_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_3b_3x3_out_channel - outer_oc_idx * inception_3b_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_3b_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3b_3x3_in_channel - outer_ic_idx * inception_3b_3x3_block_in_channel;
						global_weight_ic_num = inception_3b_3x3_in_channel - outer_ic_idx * inception_3b_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_3b_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_3b_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_3b_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_3b_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3b_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3b_3x3_outer_height - 1) ? inception_3b_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3b_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3b_3x3_outer_width - 1) ? inception_3b_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3b_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3b_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3b_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3b_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_3b_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_3b_3x3_bias_DDR_offset + (inception_3b_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_3b_3x3_inner_pe_parallel + outer_oc_idx * inception_3b_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_3b_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_3b_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_3b_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3b_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_3b_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3b_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3b_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_3x3_pad_top + inception_3b_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_3x3_pad_left + inception_3b_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3b_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3b_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3b_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_3b_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_3b_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_3b_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3b_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3b_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_3b_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_3b_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3b_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_3b_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_3b_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3b_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_3b_5x5_reduce_out_channel - outer_oc_idx * inception_3b_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_3b_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3b_5x5_reduce_in_channel - outer_ic_idx * inception_3b_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_3b_5x5_reduce_in_channel - outer_ic_idx * inception_3b_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3b_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3b_5x5_reduce_outer_height - 1) ? inception_3b_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3b_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3b_5x5_reduce_outer_width - 1) ? inception_3b_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3b_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3b_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3b_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3b_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3b_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3b_5x5_reduce_bias_DDR_offset + (inception_3b_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_3b_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_3b_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3b_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3b_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3b_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3b_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3b_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_5x5_reduce_pad_top + inception_3b_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_5x5_reduce_pad_left + inception_3b_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_5x5_reduce_2_config>(global_feature[inception_3b_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_5x5_reduce_2_config>(global_feature[inception_3b_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3b_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3b_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3b_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_3b_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_3b_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_3b_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3b_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3b_5x5_block_out_channel;
				int global_weight_ic_num = inception_3b_5x5_block_in_channel;
				int global_weight_oc_num = inception_3b_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3b_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_3b_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_3b_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3b_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_3b_5x5_out_channel - outer_oc_idx * inception_3b_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_3b_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3b_5x5_in_channel - outer_ic_idx * inception_3b_5x5_block_in_channel;
						global_weight_ic_num = inception_3b_5x5_in_channel - outer_ic_idx * inception_3b_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_3b_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_3b_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_3b_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_3b_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3b_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3b_5x5_outer_height - 1) ? inception_3b_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3b_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3b_5x5_outer_width - 1) ? inception_3b_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3b_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3b_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3b_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3b_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_3b_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_3b_5x5_bias_DDR_offset + (inception_3b_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_3b_5x5_inner_pe_parallel + outer_oc_idx * inception_3b_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_3b_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_3b_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_3b_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3b_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_3b_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3b_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3b_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_5x5_pad_top + inception_3b_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_5x5_pad_left + inception_3b_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_3b_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_3b_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_3b_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_3b_pool_block_in_height;
            int global_block_in_feature_w_num = inception_3b_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_3b_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_3b_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_3b_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_3b_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_3b_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_3b_pool_in_channel - outer_ic_idx * inception_3b_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_3a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_3b_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_3b_pool_outer_height - 1) ? inception_3b_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_3b_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_3b_pool_outer_width - 1) ? inception_3b_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_3b_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_3b_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_3b_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_3b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_3b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_3b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_3b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_3b_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_3b_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_3b_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_pool_pad_top + inception_3b_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_3b_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_pool_pad_left + inception_3b_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_pool_1_config>(global_feature[inception_3b_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_3b_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_pool_1_config>(global_feature[inception_3b_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_3b_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_3b_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_3b_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_3b_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_3b_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_3b_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_3b_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_3b_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_3b_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_3b_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_3b_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_3b_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_3b_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_3b_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_3b_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_3b_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_3b_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_3b_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_3b_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_3b_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_3b_pool_proj_out_channel - outer_oc_idx * inception_3b_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_3b_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_3b_pool_proj_in_channel - outer_ic_idx * inception_3b_pool_proj_block_in_channel;
						global_weight_ic_num = inception_3b_pool_proj_in_channel - outer_ic_idx * inception_3b_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_3b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_3b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_3b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_3b_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_3b_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_3b_pool_proj_outer_height - 1) ? inception_3b_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_3b_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_3b_pool_proj_outer_width - 1) ? inception_3b_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_3b_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_3b_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_3b_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_3b_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_3b_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_3b_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_3b_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_3b_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_3b_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_3b_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_3b_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_3b_pool_proj_bias_DDR_offset + (inception_3b_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_3b_pool_proj_inner_pe_parallel + outer_oc_idx * inception_3b_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_3b_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_3b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_3b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_3b_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_3b_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_3b_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_3b_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_3b_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_3b_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_3b_pool_proj_pad_top + inception_3b_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_3b_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_3b_pool_proj_pad_left + inception_3b_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_3b_output_1_config>(global_feature[inception_3b_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_3b_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//pool3_3x3_s2
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < pool3_3x3_s2_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < pool3_3x3_s2_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < pool3_3x3_s2_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * pool3_3x3_s2_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * pool3_3x3_s2_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * pool3_3x3_s2_block_in_channel;
            int global_block_in_feature_c_num = pool3_3x3_s2_block_in_channel;
            int global_block_in_feature_h_num = pool3_3x3_s2_block_in_height;
            int global_block_in_feature_w_num = pool3_3x3_s2_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == pool3_3x3_s2_outer_height - 1) {
                    global_block_in_feature_h_num = pool3_3x3_s2_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == pool3_3x3_s2_outer_width - 1) {
                    global_block_in_feature_w_num = pool3_3x3_s2_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == pool3_3x3_s2_outer_in_channel - 1) {
                    global_block_in_feature_c_num = pool3_3x3_s2_in_channel - outer_ic_idx * pool3_3x3_s2_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool3_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[pool3_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool3_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_3b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[pool3_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? pool3_3x3_s2_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (pool3_3x3_s2_outer_height - 1) ? pool3_3x3_s2_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? pool3_3x3_s2_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (pool3_3x3_s2_outer_width - 1) ? pool3_3x3_s2_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool3_3x3_s2_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + pool3_3x3_s2_pad_top, STRIDE_MAXPOOL3x3_S2),
                OUT_HEIGHT_MAXPOOL3x3_S2);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool3_3x3_s2_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + pool3_3x3_s2_pad_left, STRIDE_MAXPOOL3x3_S2),
                OUT_WIDTH_MAXPOOL3x3_S2);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + pool3_3x3_s2_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_HEIGHT_MAXPOOL3x3_S2);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + pool3_3x3_s2_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_WIDTH_MAXPOOL3x3_S2);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, pool3_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = pool3_3x3_s2_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * pool3_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2, N_CHAN_MAXPOOL3x3_S2);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * pool3_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S2;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S2;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * pool3_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S2;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S2;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * pool3_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * pool3_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + pool3_3x3_s2_pad_top) % STRIDE_MAXPOOL3x3_S2;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + pool3_3x3_s2_pad_left) % STRIDE_MAXPOOL3x3_S2;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S2_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S2[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S2_local_feature_in_config>(global_feature[pool3_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S2[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S2[pe_idx], local_feature_out_MAXPOOL3x3_S2[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S2_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S2[pe_idx], global_feature[pool3_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool3_3x3_s2_pad_top), STRIDE_MAXPOOL3x3_S2);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool3_3x3_s2_pad_left), STRIDE_MAXPOOL3x3_S2);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool3_3x3_s2_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool3_3x3_s2_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == pool3_3x3_s2_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool3_3x3_s2_pad_top + pool3_3x3_s2_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == pool3_3x3_s2_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool3_3x3_s2_pad_left + pool3_3x3_s2_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool3_3x3_s2_1_config>(global_feature[pool3_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool3_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool3_3x3_s2_1_config>(global_feature[pool3_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool3_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_4a_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4a_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4a_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_4a_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_4a_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_4a_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4a_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4a_1x1_block_out_channel;
				int global_weight_ic_num = inception_4a_1x1_block_in_channel;
				int global_weight_oc_num = inception_4a_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4a_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_4a_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_4a_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4a_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_4a_1x1_out_channel - outer_oc_idx * inception_4a_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_4a_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4a_1x1_in_channel - outer_ic_idx * inception_4a_1x1_block_in_channel;
						global_weight_ic_num = inception_4a_1x1_in_channel - outer_ic_idx * inception_4a_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4a_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4a_1x1_outer_height - 1) ? inception_4a_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4a_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4a_1x1_outer_width - 1) ? inception_4a_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4a_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4a_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4a_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4a_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4a_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4a_1x1_bias_DDR_offset + (inception_4a_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_4a_1x1_inner_pe_parallel + outer_oc_idx * inception_4a_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4a_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4a_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4a_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4a_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4a_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4a_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4a_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_1x1_pad_top + inception_4a_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_1x1_pad_left + inception_4a_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4a_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4a_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4a_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4a_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4a_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4a_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4a_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4a_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_4a_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_4a_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4a_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4a_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4a_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4a_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4a_3x3_reduce_out_channel - outer_oc_idx * inception_4a_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4a_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4a_3x3_reduce_in_channel - outer_ic_idx * inception_4a_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_4a_3x3_reduce_in_channel - outer_ic_idx * inception_4a_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4a_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4a_3x3_reduce_outer_height - 1) ? inception_4a_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4a_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4a_3x3_reduce_outer_width - 1) ? inception_4a_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4a_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4a_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4a_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4a_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4a_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4a_3x3_reduce_bias_DDR_offset + (inception_4a_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4a_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_4a_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4a_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4a_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4a_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4a_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4a_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_3x3_reduce_pad_top + inception_4a_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_3x3_reduce_pad_left + inception_4a_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_3x3_reduce_2_config>(global_feature[inception_4a_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_3x3_reduce_2_config>(global_feature[inception_4a_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4a_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4a_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4a_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_4a_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_4a_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_4a_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4a_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4a_3x3_block_out_channel;
				int global_weight_ic_num = inception_4a_3x3_block_in_channel;
				int global_weight_oc_num = inception_4a_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4a_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_4a_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_4a_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4a_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_4a_3x3_out_channel - outer_oc_idx * inception_4a_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_4a_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4a_3x3_in_channel - outer_ic_idx * inception_4a_3x3_block_in_channel;
						global_weight_ic_num = inception_4a_3x3_in_channel - outer_ic_idx * inception_4a_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4a_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4a_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4a_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4a_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4a_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4a_3x3_outer_height - 1) ? inception_4a_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4a_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4a_3x3_outer_width - 1) ? inception_4a_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4a_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4a_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4a_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4a_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_4a_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_4a_3x3_bias_DDR_offset + (inception_4a_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_4a_3x3_inner_pe_parallel + outer_oc_idx * inception_4a_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_4a_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_4a_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_4a_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4a_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_4a_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4a_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4a_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_3x3_pad_top + inception_4a_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_3x3_pad_left + inception_4a_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4a_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4a_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4a_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4a_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4a_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4a_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4a_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4a_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_4a_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_4a_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4a_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4a_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4a_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4a_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4a_5x5_reduce_out_channel - outer_oc_idx * inception_4a_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4a_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4a_5x5_reduce_in_channel - outer_ic_idx * inception_4a_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_4a_5x5_reduce_in_channel - outer_ic_idx * inception_4a_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4a_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4a_5x5_reduce_outer_height - 1) ? inception_4a_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4a_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4a_5x5_reduce_outer_width - 1) ? inception_4a_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4a_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4a_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4a_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4a_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4a_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4a_5x5_reduce_bias_DDR_offset + (inception_4a_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4a_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_4a_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4a_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4a_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4a_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4a_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4a_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_5x5_reduce_pad_top + inception_4a_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_5x5_reduce_pad_left + inception_4a_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_5x5_reduce_2_config>(global_feature[inception_4a_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_5x5_reduce_2_config>(global_feature[inception_4a_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4a_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4a_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4a_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_4a_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_4a_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_4a_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4a_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4a_5x5_block_out_channel;
				int global_weight_ic_num = inception_4a_5x5_block_in_channel;
				int global_weight_oc_num = inception_4a_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4a_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_4a_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_4a_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4a_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_4a_5x5_out_channel - outer_oc_idx * inception_4a_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_4a_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4a_5x5_in_channel - outer_ic_idx * inception_4a_5x5_block_in_channel;
						global_weight_ic_num = inception_4a_5x5_in_channel - outer_ic_idx * inception_4a_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4a_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4a_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4a_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4a_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4a_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4a_5x5_outer_height - 1) ? inception_4a_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4a_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4a_5x5_outer_width - 1) ? inception_4a_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4a_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4a_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4a_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4a_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_4a_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_4a_5x5_bias_DDR_offset + (inception_4a_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_4a_5x5_inner_pe_parallel + outer_oc_idx * inception_4a_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_4a_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_4a_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_4a_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4a_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_4a_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4a_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4a_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_5x5_pad_top + inception_4a_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_5x5_pad_left + inception_4a_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4a_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_4a_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_4a_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_4a_pool_block_in_height;
            int global_block_in_feature_w_num = inception_4a_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_4a_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_4a_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4a_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_4a_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_4a_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_4a_pool_in_channel - outer_ic_idx * inception_4a_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_pool3_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_4a_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_4a_pool_outer_height - 1) ? inception_4a_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_4a_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_4a_pool_outer_width - 1) ? inception_4a_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_4a_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_4a_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_4a_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_4a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_4a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_4a_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_4a_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_4a_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_pool_pad_top + inception_4a_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4a_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_pool_pad_left + inception_4a_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_pool_1_config>(global_feature[inception_4a_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4a_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_pool_1_config>(global_feature[inception_4a_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4a_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_4a_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4a_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4a_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4a_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4a_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4a_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4a_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4a_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_4a_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_4a_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_4a_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4a_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4a_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_4a_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_4a_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4a_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_4a_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_4a_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4a_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_4a_pool_proj_out_channel - outer_oc_idx * inception_4a_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_4a_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4a_pool_proj_in_channel - outer_ic_idx * inception_4a_pool_proj_block_in_channel;
						global_weight_ic_num = inception_4a_pool_proj_in_channel - outer_ic_idx * inception_4a_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4a_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4a_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4a_pool_proj_outer_height - 1) ? inception_4a_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4a_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4a_pool_proj_outer_width - 1) ? inception_4a_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4a_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4a_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4a_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4a_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4a_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4a_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4a_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4a_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4a_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4a_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4a_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4a_pool_proj_bias_DDR_offset + (inception_4a_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_4a_pool_proj_inner_pe_parallel + outer_oc_idx * inception_4a_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4a_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4a_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4a_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4a_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4a_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4a_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4a_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4a_pool_proj_pad_top + inception_4a_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4a_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4a_pool_proj_pad_left + inception_4a_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4a_output_1_config>(global_feature[inception_4a_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4a_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4b_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4b_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4b_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_4b_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_4b_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_4b_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4b_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4b_1x1_block_out_channel;
				int global_weight_ic_num = inception_4b_1x1_block_in_channel;
				int global_weight_oc_num = inception_4b_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4b_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_4b_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_4b_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4b_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_4b_1x1_out_channel - outer_oc_idx * inception_4b_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_4b_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4b_1x1_in_channel - outer_ic_idx * inception_4b_1x1_block_in_channel;
						global_weight_ic_num = inception_4b_1x1_in_channel - outer_ic_idx * inception_4b_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4b_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4b_1x1_outer_height - 1) ? inception_4b_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4b_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4b_1x1_outer_width - 1) ? inception_4b_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4b_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4b_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4b_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4b_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4b_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4b_1x1_bias_DDR_offset + (inception_4b_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_4b_1x1_inner_pe_parallel + outer_oc_idx * inception_4b_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4b_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4b_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4b_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4b_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4b_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4b_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4b_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_1x1_pad_top + inception_4b_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_1x1_pad_left + inception_4b_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4b_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4b_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4b_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4b_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4b_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4b_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4b_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4b_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_4b_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_4b_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4b_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4b_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4b_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4b_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4b_3x3_reduce_out_channel - outer_oc_idx * inception_4b_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4b_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4b_3x3_reduce_in_channel - outer_ic_idx * inception_4b_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_4b_3x3_reduce_in_channel - outer_ic_idx * inception_4b_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4b_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4b_3x3_reduce_outer_height - 1) ? inception_4b_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4b_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4b_3x3_reduce_outer_width - 1) ? inception_4b_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4b_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4b_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4b_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4b_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4b_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4b_3x3_reduce_bias_DDR_offset + (inception_4b_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4b_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_4b_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4b_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4b_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4b_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4b_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4b_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_3x3_reduce_pad_top + inception_4b_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_3x3_reduce_pad_left + inception_4b_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_3x3_reduce_2_config>(global_feature[inception_4b_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_3x3_reduce_2_config>(global_feature[inception_4b_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4b_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4b_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4b_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_4b_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_4b_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_4b_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4b_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4b_3x3_block_out_channel;
				int global_weight_ic_num = inception_4b_3x3_block_in_channel;
				int global_weight_oc_num = inception_4b_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4b_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_4b_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_4b_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4b_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_4b_3x3_out_channel - outer_oc_idx * inception_4b_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_4b_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4b_3x3_in_channel - outer_ic_idx * inception_4b_3x3_block_in_channel;
						global_weight_ic_num = inception_4b_3x3_in_channel - outer_ic_idx * inception_4b_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4b_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4b_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4b_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4b_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4b_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4b_3x3_outer_height - 1) ? inception_4b_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4b_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4b_3x3_outer_width - 1) ? inception_4b_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4b_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4b_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4b_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4b_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_4b_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_4b_3x3_bias_DDR_offset + (inception_4b_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_4b_3x3_inner_pe_parallel + outer_oc_idx * inception_4b_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_4b_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_4b_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_4b_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4b_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_4b_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4b_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4b_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_3x3_pad_top + inception_4b_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_3x3_pad_left + inception_4b_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4b_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4b_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4b_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4b_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4b_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4b_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4b_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4b_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_4b_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_4b_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4b_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4b_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4b_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4b_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4b_5x5_reduce_out_channel - outer_oc_idx * inception_4b_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4b_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4b_5x5_reduce_in_channel - outer_ic_idx * inception_4b_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_4b_5x5_reduce_in_channel - outer_ic_idx * inception_4b_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4b_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4b_5x5_reduce_outer_height - 1) ? inception_4b_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4b_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4b_5x5_reduce_outer_width - 1) ? inception_4b_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4b_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4b_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4b_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4b_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4b_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4b_5x5_reduce_bias_DDR_offset + (inception_4b_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4b_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_4b_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4b_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4b_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4b_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4b_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4b_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_5x5_reduce_pad_top + inception_4b_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_5x5_reduce_pad_left + inception_4b_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_5x5_reduce_2_config>(global_feature[inception_4b_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_5x5_reduce_2_config>(global_feature[inception_4b_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4b_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4b_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4b_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_4b_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_4b_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_4b_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4b_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4b_5x5_block_out_channel;
				int global_weight_ic_num = inception_4b_5x5_block_in_channel;
				int global_weight_oc_num = inception_4b_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4b_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_4b_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_4b_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4b_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_4b_5x5_out_channel - outer_oc_idx * inception_4b_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_4b_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4b_5x5_in_channel - outer_ic_idx * inception_4b_5x5_block_in_channel;
						global_weight_ic_num = inception_4b_5x5_in_channel - outer_ic_idx * inception_4b_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4b_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4b_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4b_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4b_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4b_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4b_5x5_outer_height - 1) ? inception_4b_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4b_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4b_5x5_outer_width - 1) ? inception_4b_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4b_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4b_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4b_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4b_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_4b_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_4b_5x5_bias_DDR_offset + (inception_4b_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_4b_5x5_inner_pe_parallel + outer_oc_idx * inception_4b_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_4b_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_4b_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_4b_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4b_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_4b_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4b_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4b_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_5x5_pad_top + inception_4b_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_5x5_pad_left + inception_4b_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4b_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_4b_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_4b_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_4b_pool_block_in_height;
            int global_block_in_feature_w_num = inception_4b_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_4b_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_4b_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4b_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_4b_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_4b_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_4b_pool_in_channel - outer_ic_idx * inception_4b_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_4b_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_4b_pool_outer_height - 1) ? inception_4b_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_4b_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_4b_pool_outer_width - 1) ? inception_4b_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_4b_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_4b_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_4b_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_4b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_4b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_4b_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_4b_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_4b_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_pool_pad_top + inception_4b_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4b_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_pool_pad_left + inception_4b_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_pool_1_config>(global_feature[inception_4b_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4b_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_pool_1_config>(global_feature[inception_4b_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4b_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_4b_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4b_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4b_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4b_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4b_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4b_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4b_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4b_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_4b_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_4b_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_4b_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4b_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4b_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_4b_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_4b_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4b_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_4b_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_4b_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4b_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_4b_pool_proj_out_channel - outer_oc_idx * inception_4b_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_4b_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4b_pool_proj_in_channel - outer_ic_idx * inception_4b_pool_proj_block_in_channel;
						global_weight_ic_num = inception_4b_pool_proj_in_channel - outer_ic_idx * inception_4b_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4b_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4b_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4b_pool_proj_outer_height - 1) ? inception_4b_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4b_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4b_pool_proj_outer_width - 1) ? inception_4b_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4b_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4b_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4b_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4b_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4b_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4b_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4b_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4b_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4b_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4b_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4b_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4b_pool_proj_bias_DDR_offset + (inception_4b_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_4b_pool_proj_inner_pe_parallel + outer_oc_idx * inception_4b_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4b_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4b_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4b_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4b_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4b_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4b_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4b_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4b_pool_proj_pad_top + inception_4b_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4b_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4b_pool_proj_pad_left + inception_4b_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4b_output_1_config>(global_feature[inception_4b_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4b_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4c_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4c_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4c_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_4c_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_4c_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_4c_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4c_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4c_1x1_block_out_channel;
				int global_weight_ic_num = inception_4c_1x1_block_in_channel;
				int global_weight_oc_num = inception_4c_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4c_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_4c_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_4c_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4c_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_4c_1x1_out_channel - outer_oc_idx * inception_4c_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_4c_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4c_1x1_in_channel - outer_ic_idx * inception_4c_1x1_block_in_channel;
						global_weight_ic_num = inception_4c_1x1_in_channel - outer_ic_idx * inception_4c_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4c_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4c_1x1_outer_height - 1) ? inception_4c_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4c_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4c_1x1_outer_width - 1) ? inception_4c_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4c_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4c_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4c_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4c_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4c_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4c_1x1_bias_DDR_offset + (inception_4c_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_4c_1x1_inner_pe_parallel + outer_oc_idx * inception_4c_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4c_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4c_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4c_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4c_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4c_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4c_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4c_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_1x1_pad_top + inception_4c_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_1x1_pad_left + inception_4c_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4c_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4c_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4c_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4c_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4c_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4c_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4c_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4c_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_4c_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_4c_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4c_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4c_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4c_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4c_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4c_3x3_reduce_out_channel - outer_oc_idx * inception_4c_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4c_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4c_3x3_reduce_in_channel - outer_ic_idx * inception_4c_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_4c_3x3_reduce_in_channel - outer_ic_idx * inception_4c_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4c_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4c_3x3_reduce_outer_height - 1) ? inception_4c_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4c_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4c_3x3_reduce_outer_width - 1) ? inception_4c_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4c_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4c_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4c_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4c_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4c_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4c_3x3_reduce_bias_DDR_offset + (inception_4c_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4c_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_4c_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4c_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4c_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4c_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4c_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4c_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4c_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4c_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_3x3_reduce_pad_top + inception_4c_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_3x3_reduce_pad_left + inception_4c_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_3x3_reduce_2_config>(global_feature[inception_4c_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_3x3_reduce_2_config>(global_feature[inception_4c_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4c_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4c_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4c_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_4c_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_4c_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_4c_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4c_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4c_3x3_block_out_channel;
				int global_weight_ic_num = inception_4c_3x3_block_in_channel;
				int global_weight_oc_num = inception_4c_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4c_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_4c_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_4c_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4c_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_4c_3x3_out_channel - outer_oc_idx * inception_4c_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_4c_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4c_3x3_in_channel - outer_ic_idx * inception_4c_3x3_block_in_channel;
						global_weight_ic_num = inception_4c_3x3_in_channel - outer_ic_idx * inception_4c_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4c_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4c_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4c_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4c_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4c_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4c_3x3_outer_height - 1) ? inception_4c_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4c_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4c_3x3_outer_width - 1) ? inception_4c_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4c_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4c_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4c_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4c_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_4c_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_4c_3x3_bias_DDR_offset + (inception_4c_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_4c_3x3_inner_pe_parallel + outer_oc_idx * inception_4c_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_4c_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_4c_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_4c_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4c_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_4c_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4c_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4c_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_3x3_pad_top + inception_4c_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_3x3_pad_left + inception_4c_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4c_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4c_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4c_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4c_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4c_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4c_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4c_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4c_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_4c_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_4c_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4c_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4c_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4c_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4c_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4c_5x5_reduce_out_channel - outer_oc_idx * inception_4c_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4c_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4c_5x5_reduce_in_channel - outer_ic_idx * inception_4c_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_4c_5x5_reduce_in_channel - outer_ic_idx * inception_4c_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4c_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4c_5x5_reduce_outer_height - 1) ? inception_4c_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4c_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4c_5x5_reduce_outer_width - 1) ? inception_4c_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4c_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4c_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4c_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4c_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4c_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4c_5x5_reduce_bias_DDR_offset + (inception_4c_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4c_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_4c_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4c_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4c_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4c_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4c_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4c_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4c_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4c_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_5x5_reduce_pad_top + inception_4c_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_5x5_reduce_pad_left + inception_4c_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_5x5_reduce_2_config>(global_feature[inception_4c_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_5x5_reduce_2_config>(global_feature[inception_4c_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4c_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4c_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4c_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_4c_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_4c_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_4c_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4c_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4c_5x5_block_out_channel;
				int global_weight_ic_num = inception_4c_5x5_block_in_channel;
				int global_weight_oc_num = inception_4c_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4c_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_4c_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_4c_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4c_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_4c_5x5_out_channel - outer_oc_idx * inception_4c_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_4c_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4c_5x5_in_channel - outer_ic_idx * inception_4c_5x5_block_in_channel;
						global_weight_ic_num = inception_4c_5x5_in_channel - outer_ic_idx * inception_4c_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4c_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4c_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4c_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4c_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4c_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4c_5x5_outer_height - 1) ? inception_4c_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4c_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4c_5x5_outer_width - 1) ? inception_4c_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4c_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4c_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4c_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4c_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_4c_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_4c_5x5_bias_DDR_offset + (inception_4c_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_4c_5x5_inner_pe_parallel + outer_oc_idx * inception_4c_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_4c_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_4c_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_4c_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4c_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_4c_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4c_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4c_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_5x5_pad_top + inception_4c_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_5x5_pad_left + inception_4c_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4c_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_4c_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_4c_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_4c_pool_block_in_height;
            int global_block_in_feature_w_num = inception_4c_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_4c_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_4c_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4c_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_4c_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_4c_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_4c_pool_in_channel - outer_ic_idx * inception_4c_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_4c_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_4c_pool_outer_height - 1) ? inception_4c_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_4c_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_4c_pool_outer_width - 1) ? inception_4c_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_4c_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_4c_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_4c_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_4c_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_4c_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4c_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4c_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_4c_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_4c_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_4c_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_pool_pad_top + inception_4c_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4c_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_pool_pad_left + inception_4c_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_pool_1_config>(global_feature[inception_4c_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4c_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_pool_1_config>(global_feature[inception_4c_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4c_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_4c_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4c_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4c_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4c_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4c_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4c_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4c_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4c_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_4c_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_4c_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_4c_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4c_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4c_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_4c_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_4c_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4c_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_4c_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_4c_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4c_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_4c_pool_proj_out_channel - outer_oc_idx * inception_4c_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_4c_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4c_pool_proj_in_channel - outer_ic_idx * inception_4c_pool_proj_block_in_channel;
						global_weight_ic_num = inception_4c_pool_proj_in_channel - outer_ic_idx * inception_4c_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4c_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4c_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4c_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4c_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4c_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4c_pool_proj_outer_height - 1) ? inception_4c_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4c_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4c_pool_proj_outer_width - 1) ? inception_4c_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4c_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4c_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4c_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4c_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4c_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4c_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4c_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4c_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4c_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4c_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4c_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4c_pool_proj_bias_DDR_offset + (inception_4c_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_4c_pool_proj_inner_pe_parallel + outer_oc_idx * inception_4c_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4c_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4c_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4c_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4c_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4c_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4c_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4c_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4c_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4c_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4c_pool_proj_pad_top + inception_4c_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4c_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4c_pool_proj_pad_left + inception_4c_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4c_output_1_config>(global_feature[inception_4c_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4c_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4d_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4d_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4d_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_4d_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_4d_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_4d_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4d_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4d_1x1_block_out_channel;
				int global_weight_ic_num = inception_4d_1x1_block_in_channel;
				int global_weight_oc_num = inception_4d_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4d_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_4d_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_4d_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4d_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_4d_1x1_out_channel - outer_oc_idx * inception_4d_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_4d_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4d_1x1_in_channel - outer_ic_idx * inception_4d_1x1_block_in_channel;
						global_weight_ic_num = inception_4d_1x1_in_channel - outer_ic_idx * inception_4d_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4d_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4d_1x1_outer_height - 1) ? inception_4d_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4d_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4d_1x1_outer_width - 1) ? inception_4d_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4d_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4d_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4d_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4d_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4d_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4d_1x1_bias_DDR_offset + (inception_4d_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_4d_1x1_inner_pe_parallel + outer_oc_idx * inception_4d_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4d_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4d_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4d_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4d_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4d_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4d_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4d_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_1x1_pad_top + inception_4d_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_1x1_pad_left + inception_4d_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4d_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4d_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4d_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4d_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4d_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4d_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4d_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4d_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_4d_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_4d_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4d_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4d_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4d_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4d_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4d_3x3_reduce_out_channel - outer_oc_idx * inception_4d_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4d_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4d_3x3_reduce_in_channel - outer_ic_idx * inception_4d_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_4d_3x3_reduce_in_channel - outer_ic_idx * inception_4d_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4d_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4d_3x3_reduce_outer_height - 1) ? inception_4d_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4d_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4d_3x3_reduce_outer_width - 1) ? inception_4d_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4d_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4d_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4d_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4d_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4d_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4d_3x3_reduce_bias_DDR_offset + (inception_4d_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4d_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_4d_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4d_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4d_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4d_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4d_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4d_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4d_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4d_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_3x3_reduce_pad_top + inception_4d_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_3x3_reduce_pad_left + inception_4d_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_3x3_reduce_2_config>(global_feature[inception_4d_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_3x3_reduce_2_config>(global_feature[inception_4d_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4d_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4d_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4d_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_4d_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_4d_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_4d_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4d_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4d_3x3_block_out_channel;
				int global_weight_ic_num = inception_4d_3x3_block_in_channel;
				int global_weight_oc_num = inception_4d_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4d_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_4d_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_4d_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4d_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_4d_3x3_out_channel - outer_oc_idx * inception_4d_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_4d_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4d_3x3_in_channel - outer_ic_idx * inception_4d_3x3_block_in_channel;
						global_weight_ic_num = inception_4d_3x3_in_channel - outer_ic_idx * inception_4d_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4d_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4d_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4d_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4d_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4d_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4d_3x3_outer_height - 1) ? inception_4d_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4d_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4d_3x3_outer_width - 1) ? inception_4d_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4d_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4d_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4d_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4d_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_4d_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_4d_3x3_bias_DDR_offset + (inception_4d_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_4d_3x3_inner_pe_parallel + outer_oc_idx * inception_4d_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_4d_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_4d_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_4d_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4d_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_4d_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4d_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4d_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_3x3_pad_top + inception_4d_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_3x3_pad_left + inception_4d_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4d_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4d_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4d_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4d_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4d_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4d_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4d_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4d_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_4d_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_4d_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4d_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4d_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4d_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4d_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4d_5x5_reduce_out_channel - outer_oc_idx * inception_4d_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4d_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4d_5x5_reduce_in_channel - outer_ic_idx * inception_4d_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_4d_5x5_reduce_in_channel - outer_ic_idx * inception_4d_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4d_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4d_5x5_reduce_outer_height - 1) ? inception_4d_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4d_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4d_5x5_reduce_outer_width - 1) ? inception_4d_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4d_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4d_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4d_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4d_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4d_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4d_5x5_reduce_bias_DDR_offset + (inception_4d_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4d_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_4d_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4d_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4d_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4d_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4d_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4d_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4d_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4d_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_5x5_reduce_pad_top + inception_4d_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_5x5_reduce_pad_left + inception_4d_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_5x5_reduce_2_config>(global_feature[inception_4d_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_5x5_reduce_2_config>(global_feature[inception_4d_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4d_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4d_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4d_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_4d_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_4d_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_4d_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4d_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4d_5x5_block_out_channel;
				int global_weight_ic_num = inception_4d_5x5_block_in_channel;
				int global_weight_oc_num = inception_4d_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4d_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_4d_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_4d_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4d_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_4d_5x5_out_channel - outer_oc_idx * inception_4d_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_4d_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4d_5x5_in_channel - outer_ic_idx * inception_4d_5x5_block_in_channel;
						global_weight_ic_num = inception_4d_5x5_in_channel - outer_ic_idx * inception_4d_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4d_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4d_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4d_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4d_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4d_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4d_5x5_outer_height - 1) ? inception_4d_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4d_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4d_5x5_outer_width - 1) ? inception_4d_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4d_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4d_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4d_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4d_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_4d_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_4d_5x5_bias_DDR_offset + (inception_4d_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_4d_5x5_inner_pe_parallel + outer_oc_idx * inception_4d_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_4d_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_4d_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_4d_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4d_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_4d_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4d_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4d_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_5x5_pad_top + inception_4d_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_5x5_pad_left + inception_4d_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4d_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_4d_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_4d_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_4d_pool_block_in_height;
            int global_block_in_feature_w_num = inception_4d_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_4d_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_4d_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4d_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_4d_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_4d_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_4d_pool_in_channel - outer_ic_idx * inception_4d_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4c_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_4d_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_4d_pool_outer_height - 1) ? inception_4d_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_4d_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_4d_pool_outer_width - 1) ? inception_4d_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_4d_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_4d_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_4d_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_4d_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_4d_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4d_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4d_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_4d_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_4d_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_4d_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_pool_pad_top + inception_4d_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4d_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_pool_pad_left + inception_4d_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_pool_1_config>(global_feature[inception_4d_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4d_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_pool_1_config>(global_feature[inception_4d_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4d_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_4d_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4d_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4d_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4d_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4d_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4d_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4d_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4d_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_4d_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_4d_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_4d_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4d_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4d_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_4d_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_4d_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4d_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_4d_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_4d_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4d_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_4d_pool_proj_out_channel - outer_oc_idx * inception_4d_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_4d_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4d_pool_proj_in_channel - outer_ic_idx * inception_4d_pool_proj_block_in_channel;
						global_weight_ic_num = inception_4d_pool_proj_in_channel - outer_ic_idx * inception_4d_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4d_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4d_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4d_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4d_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4d_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4d_pool_proj_outer_height - 1) ? inception_4d_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4d_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4d_pool_proj_outer_width - 1) ? inception_4d_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4d_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4d_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4d_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4d_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4d_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4d_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4d_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4d_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4d_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4d_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4d_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4d_pool_proj_bias_DDR_offset + (inception_4d_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_4d_pool_proj_inner_pe_parallel + outer_oc_idx * inception_4d_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4d_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4d_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4d_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4d_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4d_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4d_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4d_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4d_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4d_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4d_pool_proj_pad_top + inception_4d_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4d_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4d_pool_proj_pad_left + inception_4d_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4d_output_1_config>(global_feature[inception_4d_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4d_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4e_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4e_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4e_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_4e_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_4e_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_4e_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4e_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4e_1x1_block_out_channel;
				int global_weight_ic_num = inception_4e_1x1_block_in_channel;
				int global_weight_oc_num = inception_4e_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4e_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_4e_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_4e_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4e_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_4e_1x1_out_channel - outer_oc_idx * inception_4e_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_4e_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4e_1x1_in_channel - outer_ic_idx * inception_4e_1x1_block_in_channel;
						global_weight_ic_num = inception_4e_1x1_in_channel - outer_ic_idx * inception_4e_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4e_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4e_1x1_outer_height - 1) ? inception_4e_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4e_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4e_1x1_outer_width - 1) ? inception_4e_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4e_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4e_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4e_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4e_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4e_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4e_1x1_bias_DDR_offset + (inception_4e_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_4e_1x1_inner_pe_parallel + outer_oc_idx * inception_4e_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4e_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4e_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4e_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4e_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4e_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4e_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4e_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_1x1_pad_top + inception_4e_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_1x1_pad_left + inception_4e_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4e_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4e_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4e_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4e_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4e_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4e_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4e_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4e_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_4e_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_4e_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4e_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4e_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4e_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4e_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4e_3x3_reduce_out_channel - outer_oc_idx * inception_4e_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4e_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4e_3x3_reduce_in_channel - outer_ic_idx * inception_4e_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_4e_3x3_reduce_in_channel - outer_ic_idx * inception_4e_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4e_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4e_3x3_reduce_outer_height - 1) ? inception_4e_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4e_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4e_3x3_reduce_outer_width - 1) ? inception_4e_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4e_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4e_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4e_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4e_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4e_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4e_3x3_reduce_bias_DDR_offset + (inception_4e_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4e_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_4e_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4e_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4e_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4e_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4e_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4e_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4e_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4e_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_3x3_reduce_pad_top + inception_4e_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_3x3_reduce_pad_left + inception_4e_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_3x3_reduce_2_config>(global_feature[inception_4e_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_3x3_reduce_2_config>(global_feature[inception_4e_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4e_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4e_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4e_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_4e_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_4e_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_4e_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4e_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4e_3x3_block_out_channel;
				int global_weight_ic_num = inception_4e_3x3_block_in_channel;
				int global_weight_oc_num = inception_4e_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4e_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_4e_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_4e_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4e_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_4e_3x3_out_channel - outer_oc_idx * inception_4e_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_4e_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4e_3x3_in_channel - outer_ic_idx * inception_4e_3x3_block_in_channel;
						global_weight_ic_num = inception_4e_3x3_in_channel - outer_ic_idx * inception_4e_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4e_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4e_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_4e_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_4e_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4e_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4e_3x3_outer_height - 1) ? inception_4e_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4e_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4e_3x3_outer_width - 1) ? inception_4e_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4e_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4e_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4e_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4e_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_4e_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_4e_3x3_bias_DDR_offset + (inception_4e_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_4e_3x3_inner_pe_parallel + outer_oc_idx * inception_4e_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_4e_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_4e_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_4e_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4e_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_4e_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4e_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4e_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_3x3_pad_top + inception_4e_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_3x3_pad_left + inception_4e_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4e_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4e_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4e_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_4e_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_4e_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_4e_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4e_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4e_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_4e_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_4e_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4e_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_4e_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_4e_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4e_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_4e_5x5_reduce_out_channel - outer_oc_idx * inception_4e_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_4e_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4e_5x5_reduce_in_channel - outer_ic_idx * inception_4e_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_4e_5x5_reduce_in_channel - outer_ic_idx * inception_4e_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4e_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4e_5x5_reduce_outer_height - 1) ? inception_4e_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4e_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4e_5x5_reduce_outer_width - 1) ? inception_4e_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4e_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4e_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4e_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4e_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4e_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4e_5x5_reduce_bias_DDR_offset + (inception_4e_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_4e_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_4e_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4e_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4e_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4e_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4e_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4e_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4e_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4e_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_5x5_reduce_pad_top + inception_4e_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_5x5_reduce_pad_left + inception_4e_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_5x5_reduce_2_config>(global_feature[inception_4e_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_5x5_reduce_2_config>(global_feature[inception_4e_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4e_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4e_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4e_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_4e_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_4e_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_4e_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4e_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4e_5x5_block_out_channel;
				int global_weight_ic_num = inception_4e_5x5_block_in_channel;
				int global_weight_oc_num = inception_4e_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4e_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_4e_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_4e_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4e_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_4e_5x5_out_channel - outer_oc_idx * inception_4e_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_4e_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4e_5x5_in_channel - outer_ic_idx * inception_4e_5x5_block_in_channel;
						global_weight_ic_num = inception_4e_5x5_in_channel - outer_ic_idx * inception_4e_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4e_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4e_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_4e_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_4e_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4e_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4e_5x5_outer_height - 1) ? inception_4e_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4e_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4e_5x5_outer_width - 1) ? inception_4e_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4e_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4e_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4e_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4e_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_4e_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_4e_5x5_bias_DDR_offset + (inception_4e_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_4e_5x5_inner_pe_parallel + outer_oc_idx * inception_4e_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_4e_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_4e_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_4e_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4e_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_4e_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4e_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4e_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_5x5_pad_top + inception_4e_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_5x5_pad_left + inception_4e_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_4e_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_4e_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_4e_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_4e_pool_block_in_height;
            int global_block_in_feature_w_num = inception_4e_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_4e_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_4e_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4e_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_4e_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_4e_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_4e_pool_in_channel - outer_ic_idx * inception_4e_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4d_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_4e_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_4e_pool_outer_height - 1) ? inception_4e_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_4e_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_4e_pool_outer_width - 1) ? inception_4e_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_4e_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_4e_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_4e_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_4e_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_4e_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4e_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_4e_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_4e_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_4e_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_4e_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_pool_pad_top + inception_4e_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_4e_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_pool_pad_left + inception_4e_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_pool_1_config>(global_feature[inception_4e_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4e_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_pool_1_config>(global_feature[inception_4e_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_4e_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_4e_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_4e_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_4e_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_4e_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_4e_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_4e_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_4e_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_4e_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_4e_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_4e_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_4e_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_4e_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_4e_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_4e_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_4e_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_4e_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_4e_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_4e_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_4e_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_4e_pool_proj_out_channel - outer_oc_idx * inception_4e_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_4e_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_4e_pool_proj_in_channel - outer_ic_idx * inception_4e_pool_proj_block_in_channel;
						global_weight_ic_num = inception_4e_pool_proj_in_channel - outer_ic_idx * inception_4e_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_4e_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_4e_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_4e_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_4e_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_4e_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_4e_pool_proj_outer_height - 1) ? inception_4e_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_4e_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_4e_pool_proj_outer_width - 1) ? inception_4e_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_4e_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_4e_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_4e_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_4e_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_4e_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_4e_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_4e_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_4e_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_4e_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_4e_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_4e_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_4e_pool_proj_bias_DDR_offset + (inception_4e_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_4e_pool_proj_inner_pe_parallel + outer_oc_idx * inception_4e_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_4e_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_4e_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_4e_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_4e_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_4e_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_4e_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_4e_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_4e_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_4e_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_4e_pool_proj_pad_top + inception_4e_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_4e_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_4e_pool_proj_pad_left + inception_4e_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_4e_output_1_config>(global_feature[inception_4e_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_4e_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//pool4_3x3_s2
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < pool4_3x3_s2_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < pool4_3x3_s2_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < pool4_3x3_s2_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * pool4_3x3_s2_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * pool4_3x3_s2_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * pool4_3x3_s2_block_in_channel;
            int global_block_in_feature_c_num = pool4_3x3_s2_block_in_channel;
            int global_block_in_feature_h_num = pool4_3x3_s2_block_in_height;
            int global_block_in_feature_w_num = pool4_3x3_s2_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == pool4_3x3_s2_outer_height - 1) {
                    global_block_in_feature_h_num = pool4_3x3_s2_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == pool4_3x3_s2_outer_width - 1) {
                    global_block_in_feature_w_num = pool4_3x3_s2_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == pool4_3x3_s2_outer_in_channel - 1) {
                    global_block_in_feature_c_num = pool4_3x3_s2_in_channel - outer_ic_idx * pool4_3x3_s2_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool4_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_output_1_config, global_feature_config>(DDR_feature_0, global_feature[pool4_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool4_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_4e_output_1_config, global_feature_config>(DDR_feature_0, global_feature[pool4_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? pool4_3x3_s2_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (pool4_3x3_s2_outer_height - 1) ? pool4_3x3_s2_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? pool4_3x3_s2_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (pool4_3x3_s2_outer_width - 1) ? pool4_3x3_s2_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool4_3x3_s2_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + pool4_3x3_s2_pad_top, STRIDE_MAXPOOL3x3_S2),
                OUT_HEIGHT_MAXPOOL3x3_S2);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool4_3x3_s2_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + pool4_3x3_s2_pad_left, STRIDE_MAXPOOL3x3_S2),
                OUT_WIDTH_MAXPOOL3x3_S2);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + pool4_3x3_s2_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_HEIGHT_MAXPOOL3x3_S2);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + pool4_3x3_s2_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S2) / (STRIDE_MAXPOOL3x3_S2)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S2),
                    OUT_WIDTH_MAXPOOL3x3_S2);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, pool4_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = pool4_3x3_s2_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * pool4_3x3_s2_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S2, N_CHAN_MAXPOOL3x3_S2);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * pool4_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S2;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S2;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * pool4_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S2;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S2;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S2;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S2;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S2;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S2 * STRIDE_MAXPOOL3x3_S2;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * pool4_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * pool4_3x3_s2_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S2;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + pool4_3x3_s2_pad_top) % STRIDE_MAXPOOL3x3_S2;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + pool4_3x3_s2_pad_left) % STRIDE_MAXPOOL3x3_S2;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S2_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S2[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S2_local_feature_in_config>(global_feature[pool4_3x3_s2_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S2[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S2[pe_idx], local_feature_out_MAXPOOL3x3_S2[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S2_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S2[pe_idx], global_feature[pool4_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool4_3x3_s2_pad_top), STRIDE_MAXPOOL3x3_S2);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool4_3x3_s2_pad_left), STRIDE_MAXPOOL3x3_S2);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool4_3x3_s2_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool4_3x3_s2_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == pool4_3x3_s2_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool4_3x3_s2_pad_top + pool4_3x3_s2_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == pool4_3x3_s2_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool4_3x3_s2_pad_left + pool4_3x3_s2_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S2) / STRIDE_MAXPOOL3x3_S2 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool4_3x3_s2_1_config>(global_feature[pool4_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool4_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool4_3x3_s2_1_config>(global_feature[pool4_3x3_s2_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool4_3x3_s2_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_5a_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5a_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5a_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_5a_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_5a_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_5a_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5a_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5a_1x1_block_out_channel;
				int global_weight_ic_num = inception_5a_1x1_block_in_channel;
				int global_weight_oc_num = inception_5a_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5a_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_5a_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_5a_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5a_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_5a_1x1_out_channel - outer_oc_idx * inception_5a_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_5a_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5a_1x1_in_channel - outer_ic_idx * inception_5a_1x1_block_in_channel;
						global_weight_ic_num = inception_5a_1x1_in_channel - outer_ic_idx * inception_5a_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5a_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5a_1x1_outer_height - 1) ? inception_5a_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5a_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5a_1x1_outer_width - 1) ? inception_5a_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5a_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5a_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5a_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5a_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5a_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5a_1x1_bias_DDR_offset + (inception_5a_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_5a_1x1_inner_pe_parallel + outer_oc_idx * inception_5a_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5a_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5a_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5a_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5a_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5a_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5a_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5a_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_1x1_pad_top + inception_5a_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_1x1_pad_left + inception_5a_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5a_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5a_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5a_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_5a_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_5a_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_5a_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5a_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5a_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_5a_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_5a_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5a_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_5a_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_5a_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5a_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_5a_3x3_reduce_out_channel - outer_oc_idx * inception_5a_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_5a_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5a_3x3_reduce_in_channel - outer_ic_idx * inception_5a_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_5a_3x3_reduce_in_channel - outer_ic_idx * inception_5a_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5a_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5a_3x3_reduce_outer_height - 1) ? inception_5a_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5a_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5a_3x3_reduce_outer_width - 1) ? inception_5a_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5a_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5a_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5a_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5a_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5a_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5a_3x3_reduce_bias_DDR_offset + (inception_5a_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_5a_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_5a_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5a_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5a_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5a_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5a_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5a_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5a_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5a_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_3x3_reduce_pad_top + inception_5a_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_3x3_reduce_pad_left + inception_5a_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_3x3_reduce_2_config>(global_feature[inception_5a_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_3x3_reduce_2_config>(global_feature[inception_5a_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5a_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5a_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5a_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_5a_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_5a_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_5a_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5a_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5a_3x3_block_out_channel;
				int global_weight_ic_num = inception_5a_3x3_block_in_channel;
				int global_weight_oc_num = inception_5a_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5a_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_5a_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_5a_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5a_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_5a_3x3_out_channel - outer_oc_idx * inception_5a_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_5a_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5a_3x3_in_channel - outer_ic_idx * inception_5a_3x3_block_in_channel;
						global_weight_ic_num = inception_5a_3x3_in_channel - outer_ic_idx * inception_5a_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_5a_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_5a_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_5a_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_5a_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5a_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5a_3x3_outer_height - 1) ? inception_5a_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5a_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5a_3x3_outer_width - 1) ? inception_5a_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5a_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5a_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5a_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5a_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_5a_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_5a_3x3_bias_DDR_offset + (inception_5a_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_5a_3x3_inner_pe_parallel + outer_oc_idx * inception_5a_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_5a_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_5a_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_5a_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5a_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_5a_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5a_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5a_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_3x3_pad_top + inception_5a_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_3x3_pad_left + inception_5a_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5a_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5a_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5a_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_5a_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_5a_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_5a_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5a_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5a_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_5a_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_5a_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5a_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_5a_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_5a_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5a_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_5a_5x5_reduce_out_channel - outer_oc_idx * inception_5a_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_5a_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5a_5x5_reduce_in_channel - outer_ic_idx * inception_5a_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_5a_5x5_reduce_in_channel - outer_ic_idx * inception_5a_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5a_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5a_5x5_reduce_outer_height - 1) ? inception_5a_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5a_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5a_5x5_reduce_outer_width - 1) ? inception_5a_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5a_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5a_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5a_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5a_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5a_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5a_5x5_reduce_bias_DDR_offset + (inception_5a_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_5a_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_5a_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5a_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5a_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5a_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5a_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5a_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5a_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5a_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_5x5_reduce_pad_top + inception_5a_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_5x5_reduce_pad_left + inception_5a_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_5x5_reduce_2_config>(global_feature[inception_5a_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_5x5_reduce_2_config>(global_feature[inception_5a_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5a_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5a_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5a_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_5a_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_5a_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_5a_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5a_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5a_5x5_block_out_channel;
				int global_weight_ic_num = inception_5a_5x5_block_in_channel;
				int global_weight_oc_num = inception_5a_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5a_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_5a_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_5a_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5a_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_5a_5x5_out_channel - outer_oc_idx * inception_5a_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_5a_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5a_5x5_in_channel - outer_ic_idx * inception_5a_5x5_block_in_channel;
						global_weight_ic_num = inception_5a_5x5_in_channel - outer_ic_idx * inception_5a_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_5a_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_5a_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_5a_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_5a_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5a_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5a_5x5_outer_height - 1) ? inception_5a_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5a_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5a_5x5_outer_width - 1) ? inception_5a_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5a_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5a_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5a_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5a_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_5a_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_5a_5x5_bias_DDR_offset + (inception_5a_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_5a_5x5_inner_pe_parallel + outer_oc_idx * inception_5a_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_5a_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_5a_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_5a_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5a_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_5a_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5a_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5a_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_5x5_pad_top + inception_5a_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_5x5_pad_left + inception_5a_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5a_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_5a_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_5a_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_5a_pool_block_in_height;
            int global_block_in_feature_w_num = inception_5a_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_5a_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_5a_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_5a_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_5a_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_5a_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_5a_pool_in_channel - outer_ic_idx * inception_5a_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_pool4_3x3_s2_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_5a_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_5a_pool_outer_height - 1) ? inception_5a_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_5a_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_5a_pool_outer_width - 1) ? inception_5a_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_5a_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_5a_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_5a_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_5a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_5a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_5a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_5a_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_5a_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_5a_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_5a_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_pool_pad_top + inception_5a_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_5a_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_pool_pad_left + inception_5a_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_pool_1_config>(global_feature[inception_5a_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_5a_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_pool_1_config>(global_feature[inception_5a_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_5a_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_5a_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5a_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5a_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5a_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5a_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5a_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5a_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5a_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_5a_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_5a_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_5a_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5a_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5a_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_5a_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_5a_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5a_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_5a_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_5a_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5a_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_5a_pool_proj_out_channel - outer_oc_idx * inception_5a_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_5a_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5a_pool_proj_in_channel - outer_ic_idx * inception_5a_pool_proj_block_in_channel;
						global_weight_ic_num = inception_5a_pool_proj_in_channel - outer_ic_idx * inception_5a_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5a_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5a_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5a_pool_proj_outer_height - 1) ? inception_5a_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5a_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5a_pool_proj_outer_width - 1) ? inception_5a_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5a_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5a_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5a_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5a_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5a_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5a_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5a_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5a_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5a_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5a_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5a_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5a_pool_proj_bias_DDR_offset + (inception_5a_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_5a_pool_proj_inner_pe_parallel + outer_oc_idx * inception_5a_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5a_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5a_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5a_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5a_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5a_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5a_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5a_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5a_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5a_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5a_pool_proj_pad_top + inception_5a_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5a_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5a_pool_proj_pad_left + inception_5a_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5a_output_1_config>(global_feature[inception_5a_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5a_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5b_1x1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_1x1_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5b_1x1_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5b_1x1_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_1x1_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_1x1_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_1x1_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_1x1_block_in_channel;
				int global_block_in_feature_c_num = inception_5b_1x1_block_in_channel;
				int global_block_in_feature_h_num = inception_5b_1x1_block_in_height;
				int global_block_in_feature_w_num = inception_5b_1x1_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5b_1x1_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5b_1x1_block_out_channel;
				int global_weight_ic_num = inception_5b_1x1_block_in_channel;
				int global_weight_oc_num = inception_5b_1x1_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5b_1x1_outer_height - 1) {
						global_block_in_feature_h_num = inception_5b_1x1_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_1x1_outer_width - 1) {
						global_block_in_feature_w_num = inception_5b_1x1_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5b_1x1_outer_out_channel - 1) {
						global_weight_oc_num = inception_5b_1x1_out_channel - outer_oc_idx * inception_5b_1x1_block_out_channel;
					}
					if (outer_ic_idx == inception_5b_1x1_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5b_1x1_in_channel - outer_ic_idx * inception_5b_1x1_block_in_channel;
						global_weight_ic_num = inception_5b_1x1_in_channel - outer_ic_idx * inception_5b_1x1_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_1x1_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_1x1_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_1x1_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5b_1x1_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5b_1x1_outer_height - 1) ? inception_5b_1x1_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5b_1x1_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5b_1x1_outer_width - 1) ? inception_5b_1x1_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_1x1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_1x1_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_1x1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_1x1_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_1x1_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_1x1_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5b_1x1_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5b_1x1_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5b_1x1_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5b_1x1_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5b_1x1_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_1x1_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_1x1_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5b_1x1_bias_DDR_offset + (inception_5b_1x1_allocate_bias_start_idx + pe_idx + o_idx * inception_5b_1x1_inner_pe_parallel + outer_oc_idx * inception_5b_1x1_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5b_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5b_1x1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5b_1x1_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5b_1x1_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5b_1x1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5b_1x1_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_1x1_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_1x1_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_1x1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_1x1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5b_1x1_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_1x1_pad_top + inception_5b_1x1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_1x1_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_1x1_pad_left + inception_5b_1x1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_1x1_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_1x1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5b_3x3_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_3x3_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5b_3x3_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5b_3x3_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_3x3_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_3x3_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_3x3_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_3x3_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_5b_3x3_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_5b_3x3_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_5b_3x3_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5b_3x3_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5b_3x3_reduce_block_out_channel;
				int global_weight_ic_num = inception_5b_3x3_reduce_block_in_channel;
				int global_weight_oc_num = inception_5b_3x3_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5b_3x3_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_5b_3x3_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_3x3_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_5b_3x3_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5b_3x3_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_5b_3x3_reduce_out_channel - outer_oc_idx * inception_5b_3x3_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_5b_3x3_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5b_3x3_reduce_in_channel - outer_ic_idx * inception_5b_3x3_reduce_block_in_channel;
						global_weight_ic_num = inception_5b_3x3_reduce_in_channel - outer_ic_idx * inception_5b_3x3_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_3x3_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5b_3x3_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5b_3x3_reduce_outer_height - 1) ? inception_5b_3x3_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5b_3x3_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5b_3x3_reduce_outer_width - 1) ? inception_5b_3x3_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_3x3_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_3x3_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_3x3_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_3x3_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_3x3_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_3x3_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5b_3x3_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5b_3x3_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5b_3x3_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5b_3x3_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5b_3x3_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_3x3_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_3x3_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5b_3x3_reduce_bias_DDR_offset + (inception_5b_3x3_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_5b_3x3_reduce_inner_pe_parallel + outer_oc_idx * inception_5b_3x3_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5b_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5b_3x3_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5b_3x3_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5b_3x3_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5b_3x3_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5b_3x3_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_3x3_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_3x3_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_3x3_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_3x3_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5b_3x3_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_3x3_reduce_pad_top + inception_5b_3x3_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_3x3_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_3x3_reduce_pad_left + inception_5b_3x3_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_3x3_reduce_2_config>(global_feature[inception_5b_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_3x3_reduce_2_config>(global_feature[inception_5b_3x3_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_3x3_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5b_3x3
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_3x3_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5b_3x3_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5b_3x3_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_3x3_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_3x3_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_3x3_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_3x3_block_in_channel;
				int global_block_in_feature_c_num = inception_5b_3x3_block_in_channel;
				int global_block_in_feature_h_num = inception_5b_3x3_block_in_height;
				int global_block_in_feature_w_num = inception_5b_3x3_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5b_3x3_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5b_3x3_block_out_channel;
				int global_weight_ic_num = inception_5b_3x3_block_in_channel;
				int global_weight_oc_num = inception_5b_3x3_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5b_3x3_outer_height - 1) {
						global_block_in_feature_h_num = inception_5b_3x3_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_3x3_outer_width - 1) {
						global_block_in_feature_w_num = inception_5b_3x3_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5b_3x3_outer_out_channel - 1) {
						global_weight_oc_num = inception_5b_3x3_out_channel - outer_oc_idx * inception_5b_3x3_block_out_channel;
					}
					if (outer_ic_idx == inception_5b_3x3_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5b_3x3_in_channel - outer_ic_idx * inception_5b_3x3_block_in_channel;
						global_weight_ic_num = inception_5b_3x3_in_channel - outer_ic_idx * inception_5b_3x3_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_3x3_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_3x3_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_3x3) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_5b_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_5b_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_3x3_config, WEIGHT_GLOBAL_3x3_config>(DDR_weight_3x3, global_weight_3x3[inception_5b_3x3_allocate_global_weight_3x3_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_3x3,
							inception_5b_3x3_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5b_3x3_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5b_3x3_outer_height - 1) ? inception_5b_3x3_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5b_3x3_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5b_3x3_outer_width - 1) ? inception_5b_3x3_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_3x3_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_3x3_pad_top, STRIDE_CONV3x3_S1),
					OUT_HEIGHT_CONV3x3_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_3x3_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_3x3_pad_left, STRIDE_CONV3x3_S1),
					OUT_WIDTH_CONV3x3_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_3x3_pad_top - KERNEL_HEIGHT_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV3x3_S1),
						OUT_HEIGHT_CONV3x3_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_3x3_pad_left - KERNEL_WIDTH_CONV3x3_S1) / (STRIDE_CONV3x3_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV3x3_S1),
						OUT_WIDTH_CONV3x3_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5b_3x3_inner_pe_parallel * OUT_CHAN_CONV3x3_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV3x3_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5b_3x3_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5b_3x3_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5b_3x3_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV3x3_S1;
									int local_weight_ic_num = IN_CHAN_CONV3x3_S1;
									int local_weight_oc_num = OUT_CHAN_CONV3x3_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV3x3_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV3x3_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV3x3_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV3x3_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV3x3_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV3x3_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV3x3_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV3x3_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV3x3_S1 * STRIDE_CONV3x3_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV3x3_S1 * inception_5b_3x3_inner_pe_parallel - OUT_CHAN_CONV3x3_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV3x3_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_3x3_pad_top) % STRIDE_CONV3x3_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_3x3_pad_left) % STRIDE_CONV3x3_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::set_bias<CONV3x3_S1_set_bias_config>(local_feature_out_CONV3x3_S1[pe_idx], DDR_bias + inception_5b_3x3_bias_DDR_offset + (inception_5b_3x3_allocate_bias_start_idx + pe_idx + o_idx * inception_5b_3x3_inner_pe_parallel + outer_oc_idx * inception_5b_3x3_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV3x3_S1_local_feature_out_config>(local_feature_out_CONV3x3_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_out_config>(global_feature[inception_5b_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV3x3_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV3x3_S1_local_feature_in_config>(local_feature_in_CONV3x3_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV3x3_S1_local_feature_in_config>(global_feature[inception_5b_3x3_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV3x3_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_3x3_config, CONV3x3_S1_local_weight_config>(global_weight_3x3[inception_5b_3x3_allocate_global_weight_3x3_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_3x3], local_weight_CONV3x3_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_3x3, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse3x3<conv2d_config_CONV3x3_S1>(local_feature_in_CONV3x3_S1[pe_idx], local_weight_CONV3x3_S1[pe_idx][0], local_feature_out_CONV3x3_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5b_3x3_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV3x3_S1>(local_feature_out_CONV3x3_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV3x3_S1[pe_idx], global_feature[inception_5b_3x3_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5b_3x3_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_3x3_pad_top), STRIDE_CONV3x3_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_3x3_pad_left), STRIDE_CONV3x3_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_3x3_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_3x3_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5b_3x3_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_3x3_pad_top + inception_5b_3x3_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_3x3_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_3x3_pad_left + inception_5b_3x3_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV3x3_S1) / STRIDE_CONV3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_3x3_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_3x3_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5b_5x5_reduce
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_5x5_reduce_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5b_5x5_reduce_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5b_5x5_reduce_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_5x5_reduce_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_5x5_reduce_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_5x5_reduce_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_5x5_reduce_block_in_channel;
				int global_block_in_feature_c_num = inception_5b_5x5_reduce_block_in_channel;
				int global_block_in_feature_h_num = inception_5b_5x5_reduce_block_in_height;
				int global_block_in_feature_w_num = inception_5b_5x5_reduce_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5b_5x5_reduce_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5b_5x5_reduce_block_out_channel;
				int global_weight_ic_num = inception_5b_5x5_reduce_block_in_channel;
				int global_weight_oc_num = inception_5b_5x5_reduce_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5b_5x5_reduce_outer_height - 1) {
						global_block_in_feature_h_num = inception_5b_5x5_reduce_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_5x5_reduce_outer_width - 1) {
						global_block_in_feature_w_num = inception_5b_5x5_reduce_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5b_5x5_reduce_outer_out_channel - 1) {
						global_weight_oc_num = inception_5b_5x5_reduce_out_channel - outer_oc_idx * inception_5b_5x5_reduce_block_out_channel;
					}
					if (outer_ic_idx == inception_5b_5x5_reduce_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5b_5x5_reduce_in_channel - outer_ic_idx * inception_5b_5x5_reduce_block_in_channel;
						global_weight_ic_num = inception_5b_5x5_reduce_in_channel - outer_ic_idx * inception_5b_5x5_reduce_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_5x5_reduce_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5b_5x5_reduce_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5b_5x5_reduce_outer_height - 1) ? inception_5b_5x5_reduce_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5b_5x5_reduce_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5b_5x5_reduce_outer_width - 1) ? inception_5b_5x5_reduce_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_5x5_reduce_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_5x5_reduce_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_5x5_reduce_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_5x5_reduce_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_5x5_reduce_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_5x5_reduce_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5b_5x5_reduce_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5b_5x5_reduce_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5b_5x5_reduce_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5b_5x5_reduce_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5b_5x5_reduce_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_5x5_reduce_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_5x5_reduce_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5b_5x5_reduce_bias_DDR_offset + (inception_5b_5x5_reduce_allocate_bias_start_idx + pe_idx + o_idx * inception_5b_5x5_reduce_inner_pe_parallel + outer_oc_idx * inception_5b_5x5_reduce_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5b_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5b_5x5_reduce_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5b_5x5_reduce_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5b_5x5_reduce_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5b_5x5_reduce_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5b_5x5_reduce_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_5x5_reduce_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_5x5_reduce_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_5x5_reduce_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_5x5_reduce_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5b_5x5_reduce_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_5x5_reduce_pad_top + inception_5b_5x5_reduce_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_5x5_reduce_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_5x5_reduce_pad_left + inception_5b_5x5_reduce_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_5x5_reduce_2_config>(global_feature[inception_5b_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_5x5_reduce_2_config>(global_feature[inception_5b_5x5_reduce_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_5x5_reduce_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5b_5x5
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_5x5_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5b_5x5_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5b_5x5_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_5x5_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_5x5_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_5x5_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_5x5_block_in_channel;
				int global_block_in_feature_c_num = inception_5b_5x5_block_in_channel;
				int global_block_in_feature_h_num = inception_5b_5x5_block_in_height;
				int global_block_in_feature_w_num = inception_5b_5x5_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5b_5x5_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5b_5x5_block_out_channel;
				int global_weight_ic_num = inception_5b_5x5_block_in_channel;
				int global_weight_oc_num = inception_5b_5x5_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5b_5x5_outer_height - 1) {
						global_block_in_feature_h_num = inception_5b_5x5_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_5x5_outer_width - 1) {
						global_block_in_feature_w_num = inception_5b_5x5_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5b_5x5_outer_out_channel - 1) {
						global_weight_oc_num = inception_5b_5x5_out_channel - outer_oc_idx * inception_5b_5x5_block_out_channel;
					}
					if (outer_ic_idx == inception_5b_5x5_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5b_5x5_in_channel - outer_ic_idx * inception_5b_5x5_block_in_channel;
						global_weight_ic_num = inception_5b_5x5_in_channel - outer_ic_idx * inception_5b_5x5_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_5x5_reduce_2_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_5x5_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_5x5) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_5b_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_5b_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_5x5_config, WEIGHT_GLOBAL_5x5_config>(DDR_weight_5x5, global_weight_5x5[inception_5b_5x5_allocate_global_weight_5x5_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_5x5,
							inception_5b_5x5_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5b_5x5_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5b_5x5_outer_height - 1) ? inception_5b_5x5_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5b_5x5_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5b_5x5_outer_width - 1) ? inception_5b_5x5_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_5x5_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_5x5_pad_top, STRIDE_CONV5x5_S1),
					OUT_HEIGHT_CONV5x5_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_5x5_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_5x5_pad_left, STRIDE_CONV5x5_S1),
					OUT_WIDTH_CONV5x5_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_5x5_pad_top - KERNEL_HEIGHT_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV5x5_S1),
						OUT_HEIGHT_CONV5x5_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_5x5_pad_left - KERNEL_WIDTH_CONV5x5_S1) / (STRIDE_CONV5x5_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV5x5_S1),
						OUT_WIDTH_CONV5x5_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5b_5x5_inner_pe_parallel * OUT_CHAN_CONV5x5_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV5x5_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5b_5x5_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5b_5x5_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5b_5x5_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV5x5_S1;
									int local_weight_ic_num = IN_CHAN_CONV5x5_S1;
									int local_weight_oc_num = OUT_CHAN_CONV5x5_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV5x5_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV5x5_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV5x5_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV5x5_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV5x5_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV5x5_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV5x5_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV5x5_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV5x5_S1 * STRIDE_CONV5x5_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV5x5_S1 * inception_5b_5x5_inner_pe_parallel - OUT_CHAN_CONV5x5_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV5x5_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_5x5_pad_top) % STRIDE_CONV5x5_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_5x5_pad_left) % STRIDE_CONV5x5_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::set_bias<CONV5x5_S1_set_bias_config>(local_feature_out_CONV5x5_S1[pe_idx], DDR_bias + inception_5b_5x5_bias_DDR_offset + (inception_5b_5x5_allocate_bias_start_idx + pe_idx + o_idx * inception_5b_5x5_inner_pe_parallel + outer_oc_idx * inception_5b_5x5_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV5x5_S1_local_feature_out_config>(local_feature_out_CONV5x5_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_out_config>(global_feature[inception_5b_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV5x5_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV5x5_S1_local_feature_in_config>(local_feature_in_CONV5x5_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV5x5_S1_local_feature_in_config>(global_feature[inception_5b_5x5_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV5x5_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_5x5_config, CONV5x5_S1_local_weight_config>(global_weight_5x5[inception_5b_5x5_allocate_global_weight_5x5_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_5x5], local_weight_CONV5x5_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_5x5, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse5x5<conv2d_config_CONV5x5_S1>(local_feature_in_CONV5x5_S1[pe_idx], local_weight_CONV5x5_S1[pe_idx][0], local_feature_out_CONV5x5_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5b_5x5_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV5x5_S1>(local_feature_out_CONV5x5_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV5x5_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV5x5_S1[pe_idx], global_feature[inception_5b_5x5_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5b_5x5_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_5x5_pad_top), STRIDE_CONV5x5_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_5x5_pad_left), STRIDE_CONV5x5_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_5x5_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_5x5_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5b_5x5_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_5x5_pad_top + inception_5b_5x5_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_5x5_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_5x5_pad_left + inception_5b_5x5_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV5x5_S1) / STRIDE_CONV5x5_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_5x5_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_5x5_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//inception_5b_pool
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_pool_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < inception_5b_pool_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_pool_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_pool_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_pool_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_pool_block_in_channel;
            int global_block_in_feature_c_num = inception_5b_pool_block_in_channel;
            int global_block_in_feature_h_num = inception_5b_pool_block_in_height;
            int global_block_in_feature_w_num = inception_5b_pool_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == inception_5b_pool_outer_height - 1) {
                    global_block_in_feature_h_num = inception_5b_pool_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == inception_5b_pool_outer_width - 1) {
                    global_block_in_feature_w_num = inception_5b_pool_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == inception_5b_pool_outer_in_channel - 1) {
                    global_block_in_feature_c_num = inception_5b_pool_in_channel - outer_ic_idx * inception_5b_pool_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_5a_output_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_pool_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? inception_5b_pool_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (inception_5b_pool_outer_height - 1) ? inception_5b_pool_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? inception_5b_pool_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (inception_5b_pool_outer_width - 1) ? inception_5b_pool_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_pool_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_pool_pad_top, STRIDE_MAXPOOL3x3_S1),
                OUT_HEIGHT_MAXPOOL3x3_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_pool_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_pool_pad_left, STRIDE_MAXPOOL3x3_S1),
                OUT_WIDTH_MAXPOOL3x3_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_pool_pad_top - KERNEL_HEIGHT_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_HEIGHT_MAXPOOL3x3_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_pool_pad_left - KERNEL_WIDTH_MAXPOOL3x3_S1) / (STRIDE_MAXPOOL3x3_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_MAXPOOL3x3_S1),
                    OUT_WIDTH_MAXPOOL3x3_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, inception_5b_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = inception_5b_pool_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * inception_5b_pool_inner_pe_parallel * N_CHAN_MAXPOOL3x3_S1, N_CHAN_MAXPOOL3x3_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * inception_5b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_in_feature_h_num = IN_HEIGHT_MAXPOOL3x3_S1;
                            int local_in_feature_w_num = IN_WIDTH_MAXPOOL3x3_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * inception_5b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_MAXPOOL3x3_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_MAXPOOL3x3_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_MAXPOOL3x3_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_MAXPOOL3x3_S1;
                            int local_out_feature_w_num = OUT_WIDTH_MAXPOOL3x3_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_MAXPOOL3x3_S1 * STRIDE_MAXPOOL3x3_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_5b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * inception_5b_pool_inner_pe_parallel + pe_idx) * N_CHAN_MAXPOOL3x3_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_pool_pad_top) % STRIDE_MAXPOOL3x3_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_pool_pad_left) % STRIDE_MAXPOOL3x3_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<MAXPOOL3x3_S1_local_feature_in_config>(local_feature_in_MAXPOOL3x3_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, MAXPOOL3x3_S1_local_feature_in_config>(global_feature[inception_5b_pool_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_MAXPOOL3x3_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool3x3<pool2d_config_MAX3x3_S2>(local_feature_in_MAXPOOL3x3_S1[pe_idx], local_feature_out_MAXPOOL3x3_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<MAXPOOL3x3_S1_local_feature_out_config, global_feature_config>(local_feature_out_MAXPOOL3x3_S1[pe_idx], global_feature[inception_5b_pool_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_pool_pad_top), STRIDE_MAXPOOL3x3_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_pool_pad_left), STRIDE_MAXPOOL3x3_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_pool_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_pool_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == inception_5b_pool_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_pool_pad_top + inception_5b_pool_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == inception_5b_pool_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_pool_pad_left + inception_5b_pool_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_MAXPOOL3x3_S1) / STRIDE_MAXPOOL3x3_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_pool_1_config>(global_feature[inception_5b_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_5b_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_pool_1_config>(global_feature[inception_5b_pool_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            inception_5b_pool_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//inception_5b_pool_proj
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < inception_5b_pool_proj_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < inception_5b_pool_proj_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < inception_5b_pool_proj_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < inception_5b_pool_proj_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * inception_5b_pool_proj_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * inception_5b_pool_proj_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * inception_5b_pool_proj_block_in_channel;
				int global_block_in_feature_c_num = inception_5b_pool_proj_block_in_channel;
				int global_block_in_feature_h_num = inception_5b_pool_proj_block_in_height;
				int global_block_in_feature_w_num = inception_5b_pool_proj_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * inception_5b_pool_proj_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * inception_5b_pool_proj_block_out_channel;
				int global_weight_ic_num = inception_5b_pool_proj_block_in_channel;
				int global_weight_oc_num = inception_5b_pool_proj_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == inception_5b_pool_proj_outer_height - 1) {
						global_block_in_feature_h_num = inception_5b_pool_proj_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_pool_proj_outer_width - 1) {
						global_block_in_feature_w_num = inception_5b_pool_proj_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == inception_5b_pool_proj_outer_out_channel - 1) {
						global_weight_oc_num = inception_5b_pool_proj_out_channel - outer_oc_idx * inception_5b_pool_proj_block_out_channel;
					}
					if (outer_ic_idx == inception_5b_pool_proj_outer_in_channel - 1) {
						global_block_in_feature_c_num = inception_5b_pool_proj_in_channel - outer_ic_idx * inception_5b_pool_proj_block_in_channel;
						global_weight_ic_num = inception_5b_pool_proj_in_channel - outer_ic_idx * inception_5b_pool_proj_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[inception_5b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_pool_1_config, global_feature_config>(DDR_feature_0, global_feature[inception_5b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[inception_5b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							inception_5b_pool_proj_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? inception_5b_pool_proj_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (inception_5b_pool_proj_outer_height - 1) ? inception_5b_pool_proj_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? inception_5b_pool_proj_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (inception_5b_pool_proj_outer_width - 1) ? inception_5b_pool_proj_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_pool_proj_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + inception_5b_pool_proj_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_pool_proj_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + inception_5b_pool_proj_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + inception_5b_pool_proj_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + inception_5b_pool_proj_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, inception_5b_pool_proj_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = inception_5b_pool_proj_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * inception_5b_pool_proj_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * inception_5b_pool_proj_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * inception_5b_pool_proj_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + inception_5b_pool_proj_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + inception_5b_pool_proj_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + inception_5b_pool_proj_bias_DDR_offset + (inception_5b_pool_proj_allocate_bias_start_idx + pe_idx + o_idx * inception_5b_pool_proj_inner_pe_parallel + outer_oc_idx * inception_5b_pool_proj_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[inception_5b_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[inception_5b_pool_proj_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[inception_5b_pool_proj_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == inception_5b_pool_proj_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[inception_5b_pool_proj_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == inception_5b_pool_proj_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + inception_5b_pool_proj_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + inception_5b_pool_proj_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_pool_proj_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_pool_proj_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == inception_5b_pool_proj_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + inception_5b_pool_proj_pad_top + inception_5b_pool_proj_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == inception_5b_pool_proj_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + inception_5b_pool_proj_pad_left + inception_5b_pool_proj_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_inception_5b_output_1_config>(global_feature[inception_5b_pool_proj_allocate_global_out_feature_start_idx], DDR_feature_1,
								inception_5b_pool_proj_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
//pool5_7x7_s1
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < pool5_7x7_s1_outer_height; outer_h_idx++) {
    for (int outer_w_idx = 0; outer_w_idx < pool5_7x7_s1_outer_width; outer_w_idx++) {
        for (int outer_ic_idx = 0; outer_ic_idx < pool5_7x7_s1_outer_in_channel; outer_ic_idx++) {

            //calculate the index to copy features.
            //index and shape of input feature in DRAM
            int DDR_block_in_feature_h_start_idx = outer_h_idx * pool5_7x7_s1_block_interval_height;
            int DDR_block_in_feature_w_start_idx = outer_w_idx * pool5_7x7_s1_block_interval_width;
            int DDR_block_in_feature_c_start_idx = outer_ic_idx * pool5_7x7_s1_block_in_channel;
            int global_block_in_feature_c_num = pool5_7x7_s1_block_in_channel;
            int global_block_in_feature_h_num = pool5_7x7_s1_block_in_height;
            int global_block_in_feature_w_num = pool5_7x7_s1_block_in_width;

            {
                //handle the last iteration of the loop
                if (outer_h_idx == pool5_7x7_s1_outer_height - 1) {
                    global_block_in_feature_h_num = pool5_7x7_s1_in_height - DDR_block_in_feature_h_start_idx;
                }
                if (outer_w_idx == pool5_7x7_s1_outer_width - 1) {
                    global_block_in_feature_w_num = pool5_7x7_s1_in_width - DDR_block_in_feature_w_start_idx;
                }
                if (outer_ic_idx == pool5_7x7_s1_outer_in_channel - 1) {
                    global_block_in_feature_c_num = pool5_7x7_s1_in_channel - outer_ic_idx * pool5_7x7_s1_block_in_channel;
                }
            }
            //copy input feature from DRAM to global BRAM
            for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
                if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool5_7x7_s1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[pool5_7x7_s1_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
                else {
                    nnet::clear_buffer<global_feature_config>(global_feature[pool5_7x7_s1_allocate_global_in_feature_start_idx + global_in_feature_idx]);
                    nnet::copy_features_DDR2BRAM<DDR_feature_inception_5b_output_1_config, global_feature_config>(DDR_feature_0, global_feature[pool5_7x7_s1_allocate_global_in_feature_start_idx + global_in_feature_idx],
                        DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
                        DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
                        DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
                }
            }

            //dims of inner loop
            int inner_pad_top = (outer_h_idx == 0 ? pool5_7x7_s1_pad_top : 0);
            int inner_pad_bottom = (outer_h_idx == (pool5_7x7_s1_outer_height - 1) ? pool5_7x7_s1_pad_bottom : 0);
            int inner_pad_left = (outer_w_idx == 0 ? pool5_7x7_s1_pad_left : 0);
            int inner_pad_right = (outer_w_idx == (pool5_7x7_s1_outer_width - 1) ? pool5_7x7_s1_pad_bottom : 0);
            int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool5_7x7_s1_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_AVGPOOL7x7_S1) / (STRIDE_AVGPOOL7x7_S1)+1
                - DIV_CEIL(DDR_block_in_feature_h_start_idx + pool5_7x7_s1_pad_top, STRIDE_AVGPOOL7x7_S1),
                OUT_HEIGHT_AVGPOOL7x7_S1);
            int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool5_7x7_s1_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_AVGPOOL7x7_S1) / (STRIDE_AVGPOOL7x7_S1)+1
                - DIV_CEIL(DDR_block_in_feature_w_start_idx + pool5_7x7_s1_pad_left, STRIDE_AVGPOOL7x7_S1),
                OUT_WIDTH_AVGPOOL7x7_S1);
            if (outer_h_idx == 0) {
                inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + pool5_7x7_s1_pad_top - KERNEL_HEIGHT_AVGPOOL7x7_S1) / (STRIDE_AVGPOOL7x7_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_AVGPOOL7x7_S1),
                    OUT_HEIGHT_AVGPOOL7x7_S1);
            }
            if (outer_w_idx == 0) {
                inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + pool5_7x7_s1_pad_left - KERNEL_WIDTH_AVGPOOL7x7_S1) / (STRIDE_AVGPOOL7x7_S1)+1
                    - DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_AVGPOOL7x7_S1),
                    OUT_WIDTH_AVGPOOL7x7_S1);
            }
            int inner_channel = DIV_CEIL(global_block_in_feature_c_num, pool5_7x7_s1_inner_pe_parallel * N_CHAN_AVGPOOL7x7_S1);
            //do inner loop
            for (int h_idx = 0; h_idx < inner_height; h_idx++) {
                for (int w_idx = 0; w_idx < inner_width; w_idx++) {
                    for (int c_idx = 0; c_idx < inner_channel; c_idx++) {
                        int inner_pe_parallel = pool5_7x7_s1_inner_pe_parallel;
                        if (c_idx == inner_channel - 1) inner_pe_parallel = DIV_CEIL(global_block_in_feature_c_num - c_idx * pool5_7x7_s1_inner_pe_parallel * N_CHAN_AVGPOOL7x7_S1, N_CHAN_AVGPOOL7x7_S1);
#pragma HLS pipeline
                        for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
                            //index of input feature in global BRAM
                            int global_in_feature_c_start_idx = (c_idx * pool5_7x7_s1_inner_pe_parallel + pe_idx) * N_CHAN_AVGPOOL7x7_S1;
                            int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_AVGPOOL7x7_S1 * STRIDE_AVGPOOL7x7_S1 - inner_pad_top; //
                            int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_AVGPOOL7x7_S1 * STRIDE_AVGPOOL7x7_S1 - inner_pad_left;//

                            //index and shape of input feature in local BRAM
                            int local_in_feature_c_start_idx = 0;
                            int local_in_feature_h_start_idx = 0;
                            int local_in_feature_w_start_idx = 0;
                            int local_in_feature_c_num = N_CHAN_AVGPOOL7x7_S1;
                            int local_in_feature_h_num = IN_HEIGHT_AVGPOOL7x7_S1;
                            int local_in_feature_w_num = IN_WIDTH_AVGPOOL7x7_S1;

                            //index of output feature in global BRAM
                            int global_out_feature_c_start_idx = (c_idx * pool5_7x7_s1_inner_pe_parallel + pe_idx) * N_CHAN_AVGPOOL7x7_S1;
                            int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_AVGPOOL7x7_S1;
                            int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_AVGPOOL7x7_S1;

                            //index and shape of output feature in local BRAM
                            int local_out_feature_c_start_idx = 0;
                            int local_out_feature_h_start_idx = 0;
                            int local_out_feature_w_start_idx = 0;
                            int local_out_feature_c_num = N_CHAN_AVGPOOL7x7_S1;
                            int local_out_feature_h_num = OUT_HEIGHT_AVGPOOL7x7_S1;
                            int local_out_feature_w_num = OUT_WIDTH_AVGPOOL7x7_S1;


                            if (h_idx == 0) {
                                //handle padding
                                local_in_feature_h_num -= inner_pad_top;
                                local_in_feature_h_start_idx = inner_pad_top;
                                global_in_feature_h_start_idx = 0;
                            }
                            else if (h_idx == inner_height - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_AVGPOOL7x7_S1 * STRIDE_AVGPOOL7x7_S1;
                            }

                            if (w_idx == 0) {
                                //handle padding
                                local_in_feature_w_num -= inner_pad_left;
                                local_in_feature_w_start_idx = inner_pad_left;
                                global_in_feature_w_start_idx = 0;
                            }
                            else if (w_idx == inner_width - 1) {
                                //handle the last iteration of the loop and padding
                                local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_AVGPOOL7x7_S1 * STRIDE_AVGPOOL7x7_S1;
                            }
                            if ((c_idx == inner_channel - 1) && (pe_idx == inner_pe_parallel - 1)) {
                                //handle the last iteration of the loop
                                local_out_feature_c_num = global_block_in_feature_c_num - (c_idx * pool5_7x7_s1_inner_pe_parallel + pe_idx) * N_CHAN_AVGPOOL7x7_S1;
                                local_in_feature_c_num = global_block_in_feature_c_num - (c_idx * pool5_7x7_s1_inner_pe_parallel + pe_idx) * N_CHAN_AVGPOOL7x7_S1;
                            }
                            // handle the situation that convolution does not start from the first element
                            if (outer_h_idx != 0) {
                                global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + pool5_7x7_s1_pad_top) % STRIDE_AVGPOOL7x7_S1;
                            }
                            if (outer_w_idx != 0) {
                                global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + pool5_7x7_s1_pad_left) % STRIDE_AVGPOOL7x7_S1;
                            }

                            //copy input feature from global BRAM to local BRAM
                            //copy input feature
                            //std::cout << "clearing buffer for input padding" << std::endl;
                            nnet::clear_buffer<AVGPOOL7x7_S1_local_feature_in_config>(local_feature_in_AVGPOOL7x7_S1[pe_idx]);
                            nnet::copy_features_g2l<global_feature_config, AVGPOOL7x7_S1_local_feature_in_config>(global_feature[pool5_7x7_s1_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_AVGPOOL7x7_S1[pe_idx],
                                global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
                                global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
                                global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
                            //call PE and do calculation
                            nnet::pool7x7<pool2d_config_MAX3x3_S2>(local_feature_in_AVGPOOL7x7_S1[pe_idx], local_feature_out_AVGPOOL7x7_S1[pe_idx]);

                            //copy output feature from local BRAM to global BRAM
                            nnet::copy_features_l2g<AVGPOOL7x7_S1_local_feature_out_config, global_feature_config>(local_feature_out_AVGPOOL7x7_S1[pe_idx], global_feature[pool5_7x7_s1_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
                                global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
                                global_out_feature_h_start_idx, local_out_feature_h_num,
                                global_out_feature_w_start_idx, local_out_feature_w_num);

                        }
                    }
                }
            }//end inner loop
            //copy out feature from BRAM to DRAM
            {
                //index and shape of output feature in DRAM
                int DDR_block_out_feature_c_start_idx = DDR_block_in_feature_c_start_idx;
                int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + pool5_7x7_s1_pad_top), STRIDE_AVGPOOL7x7_S1);
                int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + pool5_7x7_s1_pad_left), STRIDE_AVGPOOL7x7_S1);
                if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
                if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
                int DDR_block_out_feature_c_num = global_block_in_feature_c_num;
                int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool5_7x7_s1_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_AVGPOOL7x7_S1) / STRIDE_AVGPOOL7x7_S1 + 1 - DDR_block_out_feature_h_start_idx;
                int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool5_7x7_s1_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_AVGPOOL7x7_S1) / STRIDE_AVGPOOL7x7_S1 + 1 - DDR_block_out_feature_w_start_idx;

                if (outer_h_idx == pool5_7x7_s1_outer_height - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + pool5_7x7_s1_pad_top + pool5_7x7_s1_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_AVGPOOL7x7_S1) / STRIDE_AVGPOOL7x7_S1 + 1 - DDR_block_out_feature_h_start_idx;
                }
                if (outer_w_idx == pool5_7x7_s1_outer_width - 1) {
                    //handle the last iteration of the loop
                    DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + pool5_7x7_s1_pad_left + pool5_7x7_s1_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_AVGPOOL7x7_S1) / STRIDE_AVGPOOL7x7_S1 + 1 - DDR_block_out_feature_w_start_idx;
                }
                //copy output feature from global BRAM to DRAM
                for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
                    if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool5_7x7_s1_1_config>(global_feature[pool5_7x7_s1_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool5_7x7_s1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                    else
                        nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_pool5_7x7_s1_1_config>(global_feature[pool5_7x7_s1_allocate_global_out_feature_start_idx + global_out_feature_idx], DDR_feature_1,
                            pool5_7x7_s1_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
                            DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
                            DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
                }
            }//end copy out feature from BRAM to DRAM

        }// end outer_ic loop
    }
}
//loss3_classifier
//outer loop
//copy data and call PE to do calculation
for (int outer_h_idx = 0; outer_h_idx < loss3_classifier_outer_height; outer_h_idx++) {
	for (int outer_w_idx = 0; outer_w_idx < loss3_classifier_outer_width; outer_w_idx++) {
		for (int outer_oc_idx = 0; outer_oc_idx < loss3_classifier_outer_out_channel; outer_oc_idx++) {
			for (int outer_ic_idx = 0; outer_ic_idx < loss3_classifier_outer_in_channel; outer_ic_idx++) {
				//std::cout << "outer loop" << outer_h_idx << outer_w_idx << outer_oc_idx << outer_ic_idx << std::endl;

				//calculate the index to copy features and weights.
				//index and shape of input feature in DRAM
				int DDR_block_in_feature_h_start_idx = outer_h_idx * loss3_classifier_block_interval_height;
				int DDR_block_in_feature_w_start_idx = outer_w_idx * loss3_classifier_block_interval_width;
				int DDR_block_in_feature_c_start_idx = outer_ic_idx * loss3_classifier_block_in_channel;
				int global_block_in_feature_c_num = loss3_classifier_block_in_channel;
				int global_block_in_feature_h_num = loss3_classifier_block_in_height;
				int global_block_in_feature_w_num = loss3_classifier_block_in_width;

				//index and shape of weight in DRAM
				int DDR_weight_ic_start_idx = outer_ic_idx * loss3_classifier_block_in_channel;
				int DDR_weight_oc_start_idx = outer_oc_idx * loss3_classifier_block_out_channel;
				int global_weight_ic_num = loss3_classifier_block_in_channel;
				int global_weight_oc_num = loss3_classifier_block_out_channel;

				{
					//handle the last iteration of the loop
					if (outer_h_idx == loss3_classifier_outer_height - 1) {
						global_block_in_feature_h_num = loss3_classifier_in_height - DDR_block_in_feature_h_start_idx;
					}
					if (outer_w_idx == loss3_classifier_outer_width - 1) {
						global_block_in_feature_w_num = loss3_classifier_in_width - DDR_block_in_feature_w_start_idx;
					}
					if (outer_oc_idx == loss3_classifier_outer_out_channel - 1) {
						global_weight_oc_num = loss3_classifier_out_channel - outer_oc_idx * loss3_classifier_block_out_channel;
					}
					if (outer_ic_idx == loss3_classifier_outer_in_channel - 1) {
						global_block_in_feature_c_num = loss3_classifier_in_channel - outer_ic_idx * loss3_classifier_block_in_channel;
						global_weight_ic_num = loss3_classifier_in_channel - outer_ic_idx * loss3_classifier_block_in_channel;
					}
				}
				//copy input feature and weight from DRAM to global BRAM
				for (int global_in_feature_idx = 0; global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_in_feature_idx++) {
					if (global_in_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1) {
						nnet::clear_buffer<global_feature_config>(global_feature[loss3_classifier_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool5_7x7_s1_1_config, global_feature_config>(DDR_feature_0, global_feature[loss3_classifier_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
					else {
						nnet::clear_buffer<global_feature_config>(global_feature[loss3_classifier_allocate_global_in_feature_start_idx + global_in_feature_idx]);
						nnet::copy_features_DDR2BRAM<DDR_feature_pool5_7x7_s1_1_config, global_feature_config>(DDR_feature_0, global_feature[loss3_classifier_allocate_global_in_feature_start_idx + global_in_feature_idx],
							DDR_block_in_feature_c_start_idx + global_in_feature_idx * CHANNEL_FEATURE_GLOBAL, global_block_in_feature_c_num - global_in_feature_idx * CHANNEL_FEATURE_GLOBAL,
							DDR_block_in_feature_h_start_idx, global_block_in_feature_h_num,
							DDR_block_in_feature_w_start_idx, global_block_in_feature_w_num);
					}
				}
				for (int global_weight_idx = 0; global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1); global_weight_idx++) {
					if (global_weight_idx < DIV_CEIL(global_weight_oc_num, OUT_CHANNEL_WEIGHT_GLOBAL_1x1) - 1)
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[loss3_classifier_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							loss3_classifier_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
					else
						nnet::copy_weights_DDR2BRAM<DDR_weight_1x1_config, WEIGHT_GLOBAL_1x1_config>(DDR_weight_1x1, global_weight_1x1[loss3_classifier_allocate_global_weight_1x1_start_idx + global_weight_idx],
							DDR_weight_oc_start_idx + global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1, global_weight_oc_num - global_weight_idx * OUT_CHANNEL_WEIGHT_GLOBAL_1x1,
							loss3_classifier_kernel_channel_DDR_offset + DDR_weight_ic_start_idx, global_weight_ic_num);
				}

				//std::cout << "(block)processing feature \n start_idx " << DDR_block_in_feature_c_start_idx<<","<< DDR_block_in_feature_h_start_idx << "," << DDR_block_in_feature_w_start_idx<<std::endl;
				//std::cout << "number " << global_block_in_feature_c_num << "," << global_block_in_feature_h_num << "," << global_block_in_feature_w_num <<std::endl;

				//dims of inner loop
				int inner_pad_top = (outer_h_idx == 0 ? loss3_classifier_pad_top : 0);
				int inner_pad_bottom = (outer_h_idx == (loss3_classifier_outer_height - 1) ? loss3_classifier_pad_bottom : 0);
				int inner_pad_left = (outer_w_idx == 0 ? loss3_classifier_pad_left : 0);
				int inner_pad_right = (outer_w_idx == (loss3_classifier_outer_width - 1) ? loss3_classifier_pad_bottom : 0);
				int inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + loss3_classifier_pad_top + global_block_in_feature_h_num + inner_pad_bottom - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_h_start_idx + loss3_classifier_pad_top, STRIDE_CONV1x1_S1),
					OUT_HEIGHT_CONV1x1_S1);
				int inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + loss3_classifier_pad_left + global_block_in_feature_w_num + inner_pad_right - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
					- DIV_CEIL(DDR_block_in_feature_w_start_idx + loss3_classifier_pad_left, STRIDE_CONV1x1_S1),
					OUT_WIDTH_CONV1x1_S1);
				if (outer_h_idx == 0) {
					inner_height = DIV_CEIL((DDR_block_in_feature_h_start_idx + global_block_in_feature_h_num + inner_pad_bottom + loss3_classifier_pad_top - KERNEL_HEIGHT_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_h_start_idx, STRIDE_CONV1x1_S1),
						OUT_HEIGHT_CONV1x1_S1);
				}
				if (outer_w_idx == 0) {
					inner_width = DIV_CEIL((DDR_block_in_feature_w_start_idx + global_block_in_feature_w_num + inner_pad_right + loss3_classifier_pad_left - KERNEL_WIDTH_CONV1x1_S1) / (STRIDE_CONV1x1_S1)+1
						- DIV_CEIL(DDR_block_in_feature_w_start_idx, STRIDE_CONV1x1_S1),
						OUT_WIDTH_CONV1x1_S1);
				}
				int inner_out_channel = DIV_CEIL(global_weight_oc_num, loss3_classifier_inner_pe_parallel * OUT_CHAN_CONV1x1_S1);
				int inner_in_channel = DIV_CEIL(global_weight_ic_num, IN_CHAN_CONV1x1_S1);
				//do inner loop
				for (int h_idx = 0; h_idx < inner_height; h_idx++) {
					for (int w_idx = 0; w_idx < inner_width; w_idx++) {
						for (int o_idx = 0; o_idx < inner_out_channel; o_idx++) {
							int inner_pe_parallel = loss3_classifier_inner_pe_parallel;
							if (o_idx == inner_out_channel - 1) inner_pe_parallel = global_weight_oc_num - o_idx * loss3_classifier_inner_pe_parallel;
							for (int i_idx = 0; i_idx < inner_in_channel; i_idx++) {
#pragma HLS pipeline
								for (int pe_idx = 0; pe_idx < inner_pe_parallel; pe_idx++) {
#pragma HLS unroll
									//index and shape of weight in global BRAM
									int global_weight_ic_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_weight_oc_start_idx = (o_idx * loss3_classifier_inner_pe_parallel + pe_idx) * OUT_CHAN_CONV1x1_S1;
									int local_weight_ic_num = IN_CHAN_CONV1x1_S1;
									int local_weight_oc_num = OUT_CHAN_CONV1x1_S1;

									//index of input feature in global BRAM
									int global_in_feature_c_start_idx = i_idx * IN_CHAN_CONV1x1_S1;
									int global_in_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_top; //
									int global_in_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1 - inner_pad_left;//

									//index and shape of input feature in local BRAM
									int local_in_feature_c_start_idx = 0;
									int local_in_feature_h_start_idx = 0;
									int local_in_feature_w_start_idx = 0;
									int local_in_feature_c_num = IN_CHAN_CONV1x1_S1;
									int local_in_feature_h_num = IN_HEIGHT_CONV1x1_S1;
									int local_in_feature_w_num = IN_WIDTH_CONV1x1_S1;

									//index of output feature in global BRAM
									int global_out_feature_c_start_idx = global_weight_oc_start_idx;
									int global_out_feature_h_start_idx = h_idx * OUT_HEIGHT_CONV1x1_S1;
									int global_out_feature_w_start_idx = w_idx * OUT_WIDTH_CONV1x1_S1;

									//index and shape of output feature in local BRAM
									int local_out_feature_c_start_idx = 0;
									int local_out_feature_h_start_idx = 0;
									int local_out_feature_w_start_idx = 0;
									int local_out_feature_c_num = local_weight_oc_num;
									int local_out_feature_h_num = OUT_HEIGHT_CONV1x1_S1;
									int local_out_feature_w_num = OUT_WIDTH_CONV1x1_S1;


									if (h_idx == 0) {
										//handle padding
										local_in_feature_h_num -= inner_pad_top;
										local_in_feature_h_start_idx = inner_pad_top;
										global_in_feature_h_start_idx = 0;
									}
									else if (h_idx == inner_height - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_h_num = global_block_in_feature_h_num + inner_pad_top - h_idx * OUT_HEIGHT_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}

									if (w_idx == 0) {
										//handle padding
										local_in_feature_w_num -= inner_pad_left;
										local_in_feature_w_start_idx = inner_pad_left;
										global_in_feature_w_start_idx = 0;
									}
									else if (w_idx == inner_width - 1) {
										//handle the last iteration of the loop and padding
										local_in_feature_w_num = global_block_in_feature_w_num + inner_pad_left - w_idx * OUT_WIDTH_CONV1x1_S1 * STRIDE_CONV1x1_S1;
									}
									if (o_idx == inner_out_channel - 1) {
										//handle the last iteration of the loop
										local_weight_oc_num = global_weight_oc_num - o_idx * OUT_CHAN_CONV1x1_S1 * loss3_classifier_inner_pe_parallel - OUT_CHAN_CONV1x1_S1 * pe_idx;
									}
									if (i_idx == inner_in_channel - 1) {
										//handle the last iteration of the loop
										local_in_feature_c_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
										local_weight_ic_num = global_block_in_feature_c_num - i_idx * IN_CHAN_CONV1x1_S1;
									}
									// handle the situation that convolution does not start from the first element
									if (outer_h_idx != 0) {
										global_in_feature_h_start_idx += (DDR_block_in_feature_h_start_idx + loss3_classifier_pad_top) % STRIDE_CONV1x1_S1;
									}
									if (outer_w_idx != 0) {
										global_in_feature_w_start_idx += (DDR_block_in_feature_w_start_idx + loss3_classifier_pad_left) % STRIDE_CONV1x1_S1;
									}

									if (i_idx == 0) {
										if (outer_ic_idx == 0) {
											//set bias
											//std::cout << "clearing buffer for bias" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::set_bias<CONV1x1_S1_set_bias_config>(local_feature_out_CONV1x1_S1[pe_idx], DDR_bias + loss3_classifier_bias_DDR_offset + (loss3_classifier_allocate_bias_start_idx + pe_idx + o_idx * loss3_classifier_inner_pe_parallel + outer_oc_idx * loss3_classifier_block_out_channel));
											//std::cout << "";
										}
										else {
											//restore partial sum
											//std::cout << "clearing buffer for restoring partial sum" << std::endl;
											nnet::clear_buffer<CONV1x1_S1_local_feature_out_config>(local_feature_out_CONV1x1_S1[pe_idx]);
											nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_out_config>(global_feature[loss3_classifier_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_out_CONV1x1_S1[pe_idx],
												global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_start_idx, local_out_feature_c_num,
												global_out_feature_h_start_idx, local_out_feature_h_start_idx, local_out_feature_h_num,
												global_out_feature_w_start_idx, local_out_feature_w_start_idx, local_out_feature_w_num);
										}
									}
									//copy input feature and weight from global BRAM to local BRAM
									//copy input feature
									//std::cout << "clearing buffer for input padding" << std::endl;
									nnet::clear_buffer<CONV1x1_S1_local_feature_in_config>(local_feature_in_CONV1x1_S1[pe_idx]);
									nnet::copy_features_g2l<global_feature_config, CONV1x1_S1_local_feature_in_config>(global_feature[loss3_classifier_allocate_global_in_feature_start_idx + global_in_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL], local_feature_in_CONV1x1_S1[pe_idx],
										global_in_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_in_feature_c_start_idx, local_in_feature_c_num,
										global_in_feature_h_start_idx, local_in_feature_h_start_idx, local_in_feature_h_num,
										global_in_feature_w_start_idx, local_in_feature_w_start_idx, local_in_feature_w_num);
									nnet::copy_weights_g2l<WEIGHT_GLOBAL_1x1_config, CONV1x1_S1_local_weight_config>(global_weight_1x1[loss3_classifier_allocate_global_weight_1x1_start_idx + global_weight_oc_start_idx / OUT_CHANNEL_WEIGHT_GLOBAL_1x1], local_weight_CONV1x1_S1[pe_idx],
										global_weight_oc_start_idx % OUT_CHANNEL_WEIGHT_GLOBAL_1x1, local_weight_oc_num,
										global_weight_ic_start_idx, local_weight_ic_num);
									//call PE and do calculation
									nnet::conv_output_reuse1x1<conv2d_config_CONV1x1_S1>(local_feature_in_CONV1x1_S1[pe_idx], local_weight_CONV1x1_S1[pe_idx][0], local_feature_out_CONV1x1_S1[pe_idx][0]);

									if (i_idx == inner_in_channel - 1) {
										//copy output feature from local BRAM to global BRAM
										if (outer_ic_idx == loss3_classifier_outer_in_channel - 1) {
											nnet::relu_inplace<relu_conv2d_config_CONV1x1_S1>(local_feature_out_CONV1x1_S1[pe_idx]);
										}
										nnet::copy_features_l2g<CONV1x1_S1_local_feature_out_config, global_feature_config>(local_feature_out_CONV1x1_S1[pe_idx], global_feature[loss3_classifier_allocate_global_out_feature_start_idx + global_out_feature_c_start_idx / CHANNEL_FEATURE_GLOBAL],
											global_out_feature_c_start_idx % CHANNEL_FEATURE_GLOBAL, local_out_feature_c_num,
											global_out_feature_h_start_idx, local_out_feature_h_num,
											global_out_feature_w_start_idx, local_out_feature_w_num);
									}
								}
							}
						}
					}
				}//end inner loop
				//copy out feature from BRAM to DRAM
				if (outer_ic_idx == loss3_classifier_outer_in_channel - 1)
				{
					//index and shape of output feature in DRAM
					int DDR_block_out_feature_c_start_idx = DDR_weight_oc_start_idx;
					int DDR_block_out_feature_h_start_idx = DIV_CEIL((DDR_block_in_feature_h_start_idx + loss3_classifier_pad_top), STRIDE_CONV1x1_S1);
					int DDR_block_out_feature_w_start_idx = DIV_CEIL((DDR_block_in_feature_w_start_idx + loss3_classifier_pad_left), STRIDE_CONV1x1_S1);
					if (outer_h_idx == 0) DDR_block_out_feature_h_start_idx = 0; //handle padding
					if (outer_w_idx == 0) DDR_block_out_feature_w_start_idx = 0; // handle padding
					int DDR_block_out_feature_c_num = global_weight_oc_num;
					int DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + loss3_classifier_pad_top + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					int DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + loss3_classifier_pad_left + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;

					if (outer_h_idx == loss3_classifier_outer_height - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_h_num = (DDR_block_in_feature_h_start_idx + loss3_classifier_pad_top + loss3_classifier_pad_bottom + global_block_in_feature_h_num - KERNEL_HEIGHT_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_h_start_idx;
					}
					if (outer_w_idx == loss3_classifier_outer_width - 1) {
						//handle the last iteration of the loop
						DDR_block_out_feature_w_num = (DDR_block_in_feature_w_start_idx + loss3_classifier_pad_left + loss3_classifier_pad_right + global_block_in_feature_w_num - KERNEL_WIDTH_CONV1x1_S1) / STRIDE_CONV1x1_S1 + 1 - DDR_block_out_feature_w_start_idx;
					}
					//copy output feature from global BRAM to DRAM
					for (int global_out_feature_idx = 0; global_out_feature_idx < DIV_CEIL(global_block_in_feature_c_num, CHANNEL_FEATURE_GLOBAL); global_out_feature_idx++) {
						if (global_out_feature_idx < DIV_CEIL(DDR_block_out_feature_c_num, CHANNEL_FEATURE_GLOBAL) - 1)
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_out_config>(global_feature[loss3_classifier_allocate_global_out_feature_start_idx], DDR_feature_1,
								loss3_classifier_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
						else
							nnet::copy_features_BRAM2DDR<global_feature_config, DDR_feature_out_config>(global_feature[loss3_classifier_allocate_global_out_feature_start_idx], DDR_feature_1,
								loss3_classifier_out_channel_DDR_offset + DDR_block_out_feature_c_start_idx + global_out_feature_idx * CHANNEL_FEATURE_GLOBAL, DDR_block_out_feature_c_num - global_out_feature_idx * CHANNEL_FEATURE_GLOBAL,
								DDR_block_out_feature_h_start_idx, DDR_block_out_feature_h_num,
								DDR_block_out_feature_w_start_idx, DDR_block_out_feature_w_num);
					}
				}//end copy out feature from BRAM to DRAM
			}// end outer_ic loop
		}
	}
}
	/////////////////////////////// convolution -> inception(3b) max pool////////////////////////////(top_function)


	/////////////////////////////// inception(4a) -> inception(4e) max pool////////////////////////////(top_function)


	/////////////////////////////// inception(5a) -> linear              ////////////////////////////(top_function)
}

#endif